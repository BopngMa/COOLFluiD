#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Common/CFLog.hh"
#include "Framework/GeometricEntity.hh"
#include "Common/NoSuchValueException.hh"
#include "FiniteVolume/ComputeDiffusiveFlux.hh"
#include "FiniteVolume/DerivativeComputer.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
DriftWaves2DHalfTwoFluid<UPDATEVAR>::DriftWaves2DHalfTwoFluid(const std::string& name) :
  ComputeSourceTermFVMCC(name),
  _varSet(CFNULL),
  _nstates(CFNULL),
  socket_Qtot("Qtot"),
  socket_GradPyi("GradPyi"),
  socket_GradPye("GradPye"),
  _physicalData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _dummyGradients(),
  _Btotal(),
  _Etotal()
{
  addConfigOptionsTo(this);

  _electricCharge = Framework::PhysicalConsts::ElectronCharge();
  setParameter("ElectricCharge",&_electricCharge);
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
DriftWaves2DHalfTwoFluid<UPDATEVAR>::~DriftWaves2DHalfTwoFluid()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >
DriftWaves2DHalfTwoFluid<UPDATEVAR>::providesSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result = 
    ComputeSourceTermFVMCC::providesSockets();
  // AAL: Example2
  result.push_back(&socket_Qtot);
  result.push_back(&socket_GradPyi);
  result.push_back(&socket_GradPye);
  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void DriftWaves2DHalfTwoFluid<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >
     ("ElectricCharge", "electric Charge of species");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void DriftWaves2DHalfTwoFluid<UPDATEVAR>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  ComputeSourceTermFVMCC::setup();
  
  _varSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  _varSet->getModel()->resizePhysicalData(_physicalData);
  cf_assert(_varSet.isNotNull());
  
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  _nstates = _sockets.template getSocketSink<RealVector>("nstates")->getDataHandle();
  
  //SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  //const CFuint nbSpecies = term->getNbScalarVars(0);
  
  _temp.resize(PhysicalModelStack::getActive()->getNbEq());
  //const CFuint maxNbNodesIn2DCV = 4;
  //_states.reserve(maxNbNodesIn2DCV);
  //SafePtr<DerivativeComputer> derComput = this->getMethodData().getDerivativeComputer();
  //const CFuint nbNodesInControlVolume = derComput->getMaxNbVerticesInControlVolume();
  //values.resize(PhysicalModelStack::getActive()->getNbEq(), nbNodesInControlVolume);

  //************************************************************
  // AAL: Here you need to resize ALL the member variables that are defined in the .hh to be a Vector
  //************************************************************
  // Example3: the socket GammaIon resized to nbCells and initialized to 0
  Common::SafePtr<Common::ConnectivityTable<CFuint> > cells =
    MeshDataStack::getActive()->getConnectivity("cellStates_InnerCells");
  const CFuint nbCells = cells->nbRows();
  socket_Qtot.getDataHandle().resize(nbCells);
  socket_GradPyi.getDataHandle().resize(nbCells);
  socket_GradPye.getDataHandle().resize(nbCells);

  DataHandle<CFreal> ChargePrint = socket_Qtot.getDataHandle();
  DataHandle<CFreal> GradPyiPrint = socket_GradPyi.getDataHandle();
  DataHandle<CFreal> GradPyePrint = socket_GradPye.getDataHandle();

  ChargePrint.resize(nbCells);
  ChargePrint = 0;
  GradPyiPrint.resize(nbCells);
  GradPyiPrint = 0;
  GradPyePrint.resize(nbCells);
  GradPyePrint = 0;
  
  //Example4: Here I resize the vectors defined in the .hh
  _NonInducedEMField.resize(6);
  _Btotal.resize(3);
  _Etotal.resize(3);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void DriftWaves2DHalfTwoFluid<UPDATEVAR>::computeSource
(Framework::GeometricEntity *const element, RealVector& source, RealMatrix& jacobian)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  //AAL: Setting up some needed variables
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const vector<State*>* const states = element->getStates();
  const CFuint elemID = element->getID();

  //AAL: Declaring in this function the sockets 
  DataHandle<CFreal> ChargePrint = socket_Qtot.getDataHandle();
  DataHandle<CFreal> GradPyiPrint = socket_GradPyi.getDataHandle();
  DataHandle<CFreal> GradPyePrint = socket_GradPye.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  
  cf_assert(states->size() == 1);
 
  //
  State *const currState = (*states)[0];
  _varSet->computePhysicalData(*(*states)[0], _physicalData);
  _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
    (currState->getCoordinates()[XX], currState->getCoordinates()[YY]);
  
  //std::cout << "Bz = " << _NonInducedEMField[ZZ] <<"\n"; 
  //   RealVector& refData = _varSet->getModel()->getReferencePhysicalData();
  DataHandle<CFreal> volumes = socket_volumes.getDataHandle();
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();
  
  //AAL: Here call all the functions needed to compute the source of Maxwell equations
  _Etotal = 0;
  _Btotal = 0;
  computeEMField();
  //std::cout <<"After computing Bz = " << _Btotal[ZZ] << std::endl;
//Physical constants:
  const CFreal kB = Framework::PhysicalConsts::Boltzmann(); 
  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  const CFreal qe = _electricCharge*(-1);                        // charge of electrons in Coulombs
  const CFreal qi = qe*(-1);                                    // charge of ions in Coulombs
  const CFreal mi = _varSet->getModel()->getMolecularMass2();                            // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal me = _varSet->getModel()->getMolecularMass1();                // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 	   //electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; //ions density
  //std::cout << "rho  = " << rho  << "\n";
  //std::cout << "rhoe = " << rhoe << "\n";
  //std::cout << "rhoi = " << rhoi << std::endl;
  const CFreal Qtot = qe*rhoe/me + qi*rhoi/mi;
  //std::cout << "Qtot = " << Qtot << std::endl;
  const CFuint firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFreal ue = _physicalData[firstVelocity];
  const CFreal ve = _physicalData[firstVelocity + 1];
  const CFreal we = _physicalData[firstVelocity + 2];
  const CFreal ui = _physicalData[firstVelocity + 3];
  const CFreal vi = _physicalData[firstVelocity + 4];
  const CFreal wi = _physicalData[firstVelocity + 5];
  //const CFreal un = _physicalData[firstVelocity + 6];
  //const CFreal vn = _physicalData[firstVelocity + 7];
  //const CFreal wn = _physicalData[firstVelocity + 8];

  // Computing the electric current
  const CFreal Jx = qe*(rhoe/me)*ue + qi*(rhoi/mi)*ui;
  const CFreal Jy = qe*(rhoe/me)*ve + qi*(rhoi/mi)*vi;
  const CFreal Jz = qe*(rhoe/me)*we + qi*(rhoi/mi)*wi;
//  std::cout <<"Jx= " <<Jx <<"\n";
//  std::cout <<"ue= " <<ue <<"\n";
//  std::cout <<"ui= " <<ui <<"\n";
//  abort();

//AAL: Here goes the source of Maxwell equations
  if (nbEqs == totalNbEqs || iEqSS == 0) {
    /// MAXWELL
    const CFreal c_e = term->getLightSpeed();
    const CFreal mu0 = term->getPermeability();
    const CFreal ovEpsilon = c_e*c_e*mu0;
//    std::cout << "1/Epsilon0= " <<ovEpsilon <<"\n";  

    source[0] = 0.;             //x-Faraday's Law
    source[1] = 0.;          	//y-Faraday's Law
    source[2] = 0.;          	//z-Faraday's Law
    source[3] = -Jx*ovEpsilon;	//x-Ampere's Law
    source[4] = -Jy*ovEpsilon;	//y-Ampere's Law
    source[5] = -Jz*ovEpsilon;  //z-Ampere's Law
    source[6] = 0.;		//divB
    source[7] = Qtot*ovEpsilon; //divE
  }
  
  //AAL: Here the source for three-fluid continuity, momentum and energy equations
  if (nbEqs == totalNbEqs || iEqSS == 1) {    
    //AAL: The following should be changed for the 3 Fluid case
    /// FLUID EQUATIONS
    //AAL: CONTINUITY
    source[8] = 0.;					// Electrons continuity equation
    source[9] = 0.;					// Ions continuity equation
      
    //AAL: MOMENTUM
    const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
    CFreal Te = _physicalData[firstTemperature]; //electron temperature
    CFreal Ti = _physicalData[firstTemperature + 4]; //ion temperature
    

    //Compute gradients NO
    // Computation of the gradients for printing pressure gradient in the result
       // ID for the physical data and the gradients
       const CFuint firstSpecies =_varSet->getModel()->getFirstScalarVar(0);
       const CFuint rhoeID = 8;
       const CFuint rhoiID = 9;
       const CFuint TeID   = 16;
       const CFuint TiID   = 17;
       const CFuint gradrhoeID = elemID*totalNbEqs + rhoeID;
       const CFuint gradrhoiID = elemID*totalNbEqs + rhoiID;
       const CFuint gradTeID = elemID*totalNbEqs + TeID;
       const CFuint gradTiID = elemID*totalNbEqs + TiID;
       const CFreal gradRhoe = this->m_uy[gradrhoeID];
       const CFreal gradRhoi = this->m_uy[gradrhoiID];
       const CFreal gradTe = this->m_uy[gradTeID];
       const CFreal gradTi = this->m_uy[gradTiID];

       const CFreal Rgasi = kB/mi;
       const CFreal Rgase = kB/me;
       const CFreal GradPyi = Rgasi*(gradRhoi*Ti + rhoi*gradTi);
       const CFreal GradPye = Rgase*(gradRhoe*Te + rhoe*gradTe );

    //electron, ion properties
    const CFreal ne = rhoe/me;		   	// number density electrons [m^-3]
    const CFreal ni = rhoi/mi;		   	// number density ions [m^-3]
    const CFreal pi = MathTools::MathConsts::CFrealPi(); //Pi number
    const CFreal Epsilon0 = Framework::PhysicalConsts::VacuumPermittivity();
    //std::cout <<"Epsilon0e = "<<Epsilon0<< "\n";
    //to calculate collision Frequency
    const CFreal r_di = std::sqrt(Epsilon0*kB*Ti/(ni*qe*qe)); //Debye length of ions [m]
    const CFreal r_de = std::sqrt(Epsilon0*kB*Te/(ne*qe*qe)); //Debye length of electrons [m]
    const CFreal r_deb = r_de*r_di/(std::sqrt(r_de*r_de + r_di*r_di)); //Debye length for plasma with several species

    // Collisional terms (Alex' way)
    // General terms
    const CFreal gamma_e = me/(kB*Te); 
    const CFreal gamma_i = mi/(kB*Ti);
    const CFreal mu_ie   = mi*me/(mi + me);
    const CFreal gamma_ie   = gamma_i*gamma_e/(gamma_i + gamma_e);

    // Coulomb Collisions
    const CFreal Debye_minusTwo = ne*qe*qe/(Epsilon0*kB*Te) + ni*qi*qi/(Epsilon0*kB*Ti); 
    const CFreal Debye = std::sqrt(1/Debye_minusTwo);
    const CFreal Lambda_ie = 12*pi*Epsilon0/std::abs(qe*qi)*mu_ie/gamma_ie*Debye;
    const CFreal C_log = std::log(Lambda_ie); //Coulomb logarithm 
    const CFreal tau_minusOne_ie = 16*std::sqrt(pi)/3*ne*std::pow(gamma_ie/2,3./2.)*std::pow(qi*qe/(4*pi*Epsilon0*mu_ie),2.)*C_log;//ion collision frequency for collisions with electrons (target)
    const CFreal tau_minusOne_ei = 16*std::sqrt(pi)/3*ni*std::pow(gamma_ie/2,3./2.)*std::pow(qi*qe/(4*pi*Epsilon0*mu_ie),2.)*C_log;//electron collision frequency for collisions with ions (target)
    //std::cout <<"coll freq_e = "<< tau_minusOne_ie << "\n";
    //std::cout <<"coll freq_i = "<< tau_minusOne_ei << "\n";
    //abort();
    //momentum equations - NO removed const
    CFreal emMomentumXe = qe*ne*(_Etotal[XX] + ve*_Btotal[ZZ] - we*_Btotal[YY]);	//Electromagnetic momentum for electrons in X
    CFreal emMomentumXi = qi*ni*(_Etotal[XX] + vi*_Btotal[ZZ] - wi*_Btotal[YY]);	//Electromagnetic momentum for ions in X
    CFreal emMomentumYe = qe*ne*(_Etotal[YY] + we*_Btotal[XX] - ue*_Btotal[ZZ]);	//Electromagnetic momentum for electrons in Y
    CFreal emMomentumYi = qi*ni*(_Etotal[YY] + wi*_Btotal[XX] - ui*_Btotal[ZZ]);	//Electromagnetic momentum for ions in Y
    CFreal emMomentumZe = qe*ne*(_Etotal[ZZ] + ue*_Btotal[YY] - ve*_Btotal[XX]);	//Electromagnetic momentum for electrons in Z
    CFreal emMomentumZi = qi*ni*(_Etotal[ZZ] + ui*_Btotal[YY] - vi*_Btotal[XX]);	//Electromagnetic momentum for ions in Z

    //collisional momentum:
    const CFreal collMomentumXe = -(ne*mu_ie*tau_minusOne_ei*(ue - ui));
    const CFreal collMomentumYe = -(ne*mu_ie*tau_minusOne_ei*(ve - vi));
    const CFreal collMomentumZe = -(ne*mu_ie*tau_minusOne_ei*(we - wi));
    const CFreal collMomentumXi = -(ni*mu_ie*tau_minusOne_ie*(ui - ue));
    const CFreal collMomentumYi = -(ni*mu_ie*tau_minusOne_ie*(vi - ve));
    const CFreal collMomentumZi = -(ni*mu_ie*tau_minusOne_ie*(wi - we));
   	
    source[10] = emMomentumXe + collMomentumXe;   //Electrons X momentum
    source[11] = emMomentumYe + collMomentumYe;   //Electrons Y momentum
    source[12] = emMomentumZe + collMomentumZe;   //Electrons Z momentum

    source[13] = emMomentumXi + collMomentumXi;   //Ions X momentum
    source[14] = emMomentumYi + collMomentumYi;   //Ions Y momentum
    source[15] = emMomentumZi + collMomentumZi;   //Ions Z momentum

      
    //AAL: ENERGY
    // Computation of hydrodynamic pressure
    const CFreal u = (rhoe*ue + rhoi*ui)/rho; 
    const CFreal v = (rhoe*ve + rhoi*vi)/rho; 
    const CFreal w = (rhoe*we + rhoi*wi)/rho;

    const CFreal workColle = (ue - ui)*collMomentumXe + (ve - vi)*collMomentumYe + (we - wi)*collMomentumZe;
    const CFreal workColli = (ui - ue)*collMomentumXi + (vi - ve)*collMomentumYi + (wi - we)*collMomentumZi;

    const CFreal heatColle = -3*kB*ne*(mu_ie/(me + mi))*tau_minusOne_ei*(Te - Ti);
    const CFreal heatColli = -3*kB*ni*(mu_ie/(me + mi))*tau_minusOne_ie*(Ti - Te);

    const CFreal emEnergye = qe*(rhoe/me)*(ue*_Etotal[XX] + ve*_Etotal[YY] + we*_Etotal[ZZ]); //electrons
    const CFreal emEnergyi = qi*(rhoi/mi)*(ui*_Etotal[XX] + vi*_Etotal[YY] + wi*_Etotal[ZZ]); //ions

    source[16] = emEnergye + workColle + heatColle; //Electrons Energy Source terms
    source[17] = emEnergyi + workColli + heatColli; //Ions Energy

    // AAL: Write the sockets
    //if (!this->getMethodData().isPerturb()) { // Condition to avoid writing when the source is perturbed
      //if(currState->isParUpdatable()) { // Condition to write only once the partition cells
        ChargePrint[elemID] = Qtot;
        GradPyiPrint[elemID] = GradPyi; //gradTi;
        GradPyePrint[elemID] = GradPye; //gradTe;
//GammaRec[elemID] = _GammaRec_i;
      //}
    //}
  }
  // AAL: Don't forget to multiply by the volume!!!!!
  source *= volumes[elemID];
  for (CFuint i = 0; i < source.size(); i++) {
    CFLog(VERBOSE, "DriftWaves2DHalfTwoFluid:: source [" << i <<"] = " << source[i] << "\n");
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void DriftWaves2DHalfTwoFluid<UPDATEVAR>::computeEMField()
{
  //************************************************************
  // AAL: This is the function where we compute the total current em field
  //************************************************************

  //// Total Electromagnetic Field
  _Btotal[XX] = _physicalData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
  _Btotal[YY] = _physicalData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
  _Btotal[ZZ] = _physicalData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
  _Etotal[XX] = _physicalData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
  _Etotal[YY] = _physicalData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
  _Etotal[ZZ] = _physicalData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];

}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
