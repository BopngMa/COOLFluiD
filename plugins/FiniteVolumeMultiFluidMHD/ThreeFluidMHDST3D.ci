#include "Framework/PhysicalChemicalLibrary.hh"
#include "Framework/PhysicalConsts.hh"
#include "Common/CFLog.hh"
#include "Framework/GeometricEntity.hh"
#include "Common/NoSuchValueException.hh"
#include "FiniteVolume/ComputeDiffusiveFlux.hh"
#include "FiniteVolume/DerivativeComputer.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST3D<UPDATEVAR>::ThreeFluidMHDST3D(const std::string& name) :
  ComputeSourceTermFVMCC(name),
  _varSet(CFNULL),
  _nstates(CFNULL),
  //socket_GammaIon("GammaIon"),
  //socket_GammaRec("GammaRec"),
  _ys(),
  _physicalData(),
  _temp(),
  _states(),
  _values(),
  _NonInducedEMField(),
  _J(),
  _dummyGradients(),
  _massSource(),
  _collMomentumSource(),
  _chargexMomentumSource(),
  _chargexEnergySource(),
  _gravityMomentumSource(),
  _gravityEnergySource(),
  _collEnergySource(),
  _ReactEnergySource(),
  _Btotal(),
  _Etotal()
{
  //************************************************************
  // AAL: Here you write the options you want for your class,e.g.
  // in this case the electrical resistivity commented.
  // You need to define your option like _electricalResistivity
  //************************************************************
  addConfigOptionsTo(this);
  
  // AAL: Example1. You assign a default value for the electrical resistivity
  _electricalResistivity = 0.150886049694899; //underscore means member of the class; in this line you specify the default
  setParameter("electricalResistivity",&_electricalResistivity);
  _SpitzerFlag = false; //underscore means member of the class; in this line you specify the default
  setParameter("SpitzerFlag",&_SpitzerFlag);
  //example in input file: Simulator.SubSystem.CellCenterFVM.Data.ThreeFluidMHDST3D.electricalResistivity = 1.45345
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
ThreeFluidMHDST3D<UPDATEVAR>::~ThreeFluidMHDST3D()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> >
ThreeFluidMHDST3D<UPDATEVAR>::providesSockets()
{


  //************************************************************
  // AAL: Here you ask to provide sockets, i.e. info. to show in the solution file
  // see Example2. that is commented (GammaIon). You need to declare the variable _GammaIon in the header .hh
  //************************************************************
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result = 
    ComputeSourceTermFVMCC::providesSockets();
  // AAL: Example2
  //result.push_back(&socket_GammaIon);
  //result.push_back(&socket_GammaRec);

  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  //************************************************************
  // AAL: Needed to add the option. Here it goes the name that will be in the .CFcase.
  // Explanation written in the config-debug-info.log
  //************************************************************
  options.template addConfigOption< CFreal >
     ("electricalResistivity", "electrical Resistivity used in Ohm's law");
  options.template addConfigOption< bool >
     ("SpitzerFlag", "Flag for Spitzer resistivity: default is False");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::setup()
{
  //************************************************************
  // AAL: This Setup is needed. Keep the following lines. Resize the arrays of data used in the class
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  ComputeSourceTermFVMCC::setup();
  
  _varSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  _varSet->getModel()->resizePhysicalData(_physicalData);
  cf_assert(_varSet.isNotNull());
  
  DataHandle<CFreal> normals = this->socket_normals.getDataHandle();
  _nstates = _sockets.template getSocketSink<RealVector>("nstates")->getDataHandle();
  
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const CFuint nbSpecies = term->getNbScalarVars(0);
  _ys.resize(nbSpecies);
  
  _temp.resize(PhysicalModelStack::getActive()->getNbEq());
  const CFuint maxNbNodesIn2DCV = 4;
  _states.reserve(maxNbNodesIn2DCV);
  SafePtr<DerivativeComputer> derComput = this->getMethodData().getDerivativeComputer();
  const CFuint nbNodesInControlVolume = derComput->getMaxNbVerticesInControlVolume();
  _values.resize(PhysicalModelStack::getActive()->getNbEq(), nbNodesInControlVolume);

  //************************************************************
  // AAL: Here you need to resize ALL the member variables that are defined in the .hh to be a Vector
  //************************************************************
  // Example3: the socket GammaIon resized to nbCells and initialized to 0
  //Common::SafePtr<Common::ConnectivityTable<CFuint> > cells =
  //  MeshDataStack::getActive()->getConnectivity("cellStates_InnerCells");
  //const CFuint nbCells = cells->nbRows();
  //socket_GammaIon.getDataHandle().resize(nbCells);
  //socket_GammaRec.getDataHandle().resize(nbCells);
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  //GammaIon.resize(nbCells);
  //GammaIon = 0;
  //GammaRec.resize(nbCells);
  //GammaRec = 0;
  
  //Example4: Here I resize the vectors defined in the .hh
  _NonInducedEMField.resize(6);
  _J.resize(3);
  _massSource.resize(3);
  _collMomentumSource.resize(9);
  _chargexMomentumSource.resize(9);
  _chargexEnergySource.resize(3);
  _gravityMomentumSource.resize(9);
  _gravityEnergySource.resize(3);
  _collEnergySource.resize(3);
  _ReactEnergySource.resize(3);
  _Btotal.resize(3);
  _Etotal.resize(3);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::computeSource
(Framework::GeometricEntity *const element, RealVector& source, RealMatrix& jacobian)
{
  //************************************************************
  // AAL: This is the main function. The solution is  in source []
  //************************************************************
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  //AAL: Setting up some needed variables
  SafePtr<typename UPDATEVAR::PTERM> term = _varSet->getModel();
  const vector<State*>* const states = element->getStates();
  const CFuint elemID = element->getID();

  //AAL: Declaring in this function the sockets of the GammaIon and GammaRec
  //DataHandle<CFreal> GammaIon = socket_GammaIon.getDataHandle();
  //DataHandle<CFreal> GammaRec = socket_GammaRec.getDataHandle();
  
  cf_assert(states->size() == 1);
 
  //
  State *const currState = (*states)[0];
  _varSet->computePhysicalData(*(*states)[0], _physicalData);
  _NonInducedEMField = _varSet->getModel()->getNonInducedEMField
    (currState->getCoordinates()[XX], currState->getCoordinates()[YY]);
  
  //   RealVector& refData = _varSet->getModel()->getReferencePhysicalData();
  DataHandle<CFreal> volumes = socket_volumes.getDataHandle();
  
  const EquationSubSysDescriptor& eqSS = PhysicalModelStack::getActive()->getEquationSubSysDescriptor();
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();	// Maxwell's Eqs.+ Multifluid NavierStokes Eqs.
  const CFuint nbEqs = eqSS.getNbEqsSS();  				
  const CFuint iEqSS = eqSS.getEqSS();
  
  //AAL: Here call all the functions needed to compute the source of Maxwell equations
  _J = 0.;
  _Etotal = 0.;
  _Btotal = 0.;
  computeElectricCurrent();
  computegravityTerms();
  //YGM: common variables
    const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
    const CFreal qe = Framework::PhysicalConsts::ElectronCharge()*(-1) ;//Ã— 10-19 ;//charge of electrons in Coulombs
    const CFreal qi = qe;//charge of ions in Coulombs
    const CFreal me =  _varSet->getModel()->getMolecularMass1();// Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
    const CFreal mi =  _varSet->getModel()->getMolecularMass2();  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
    const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
    const CFreal rhoe = rho*_physicalData[firstDensity]; 	//electrons density
    const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
    const CFreal Qtot = qe*rhoe/me + qi*rhoi/mi;
    const CFreal qpare = qe*rhoe/me;//partial charge density for electrons
    const CFreal qpari = qi*rhoi/mi;//partial charge denisty for ions
    const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);  
    const CFuint firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
    
    const CFreal ue = _physicalData[firstVelocity];
    const CFreal ve = _physicalData[firstVelocity + 1];
    const CFreal we = _physicalData[firstVelocity + 2];
    const CFreal ui = _physicalData[firstVelocity + 3];
    const CFreal vi = _physicalData[firstVelocity + 4];
    const CFreal wi = _physicalData[firstVelocity + 5];
    const CFreal un = _physicalData[firstVelocity + 6];
    const CFreal vn = _physicalData[firstVelocity + 7];
    const CFreal wn = _physicalData[firstVelocity + 8];
 
 //AAL: Here goes the source of Maxwell equations
  if (nbEqs == totalNbEqs || iEqSS == 0) {
    /// MAXWELL
    const CFreal c_e = term->getLightSpeed();
    const CFreal mu0 = term->getPermeability();
    const CFreal ovEpsilon = c_e*c_e*mu0;
 
    source[0] = 0.;			//x-Faraday's Law
    source[1] = 0.;			//y-Faraday's Law
    source[2] = 0.;			//z-Faraday's Law
    source[3] = -_J[XX]*ovEpsilon;	//x-Ampere's Law
    source[4] = -_J[YY]*ovEpsilon;	//y-Ampere's Law
    source[5] = -_J[ZZ]*ovEpsilon;  	//z-Ampere's Law
 //YGM: why extra source terms for Ampere's law here? 
 //YGM: where are the source terms for the Poisson's eqn., div E=Q/eps_0?   
    source[6] = 0.;			//y-Ampere's Law
    source[7] = Qtot*ovEpsilon;  			//z-Ampere's Law
  }
  
  //AAL: Here the source for three-fluid continuity, momentum and energy equations
  if (nbEqs == totalNbEqs || iEqSS == 1) {
    // AAL: Call to the functions needed to compute the source in the fluid equations
    computeMassReactionsEnergySourceTerm();
    computeCollisionalMomentumEnergy();
    
    //AAL: The following should be changed for the 3 Fluid case
    /// FLUID EQUATIONS
      //AAL: CONTINUITY
      const CFreal massSource_e = _massSource[0];
      const CFreal massSource_i = _massSource[1];
      const CFreal massSource_n = _massSource[2];      
      source[8] = massSource_e;					// Electrons continuity equation
      source[9] = massSource_i;					// Ions continuity equation
      source[10] = massSource_n;				// Neutrals continuity equation
      
      //AAL: MOMENTUM

      const CFreal emMomentumXe = qpare*(_Etotal[XX] + ve*_Btotal[ZZ] - we*_Btotal[YY]);		//Electromagnetic momentum for e- in X
      const CFreal emMomentumXi =  qpari*(_Etotal[XX] + vi*_Btotal[ZZ] - wi*_Btotal[YY]);		//Electromagnetic momentum for ions in X
      const CFreal emMomentumYe = qpare*(_Etotal[YY] + wi*_Btotal[XX] - ui*_Btotal[ZZ]);		//Electromagnetic momentum for e- in Y
      const CFreal emMomentumYi = qpari*(_Etotal[YY] + wi*_Btotal[XX] - ui*_Btotal[ZZ]);		//Electromagnetic momentum for ions in Y
      const CFreal emMomentumZe = qpare*(_Etotal[ZZ] + ue*_Btotal[YY] - ve*_Btotal[XX]);		//Electromagnetic momentum for e- in Z
      const CFreal emMomentumZi = qpari*(_Etotal[ZZ] + ui*_Btotal[YY] - vi*_Btotal[XX]);		//Electromagnetic momentum for ions in Z
    
    
      const CFreal GammaIon_i = - _GammaIon_n;
      const CFreal GammaRec_n = - _GammaRec_i;
 
       //// particle mass
      const CFreal me =  _varSet->getModel()->getMolecularMass1();// Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
      const CFreal mi =  _varSet->getModel()->getMolecularMass2();  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
      const CFreal mn =  _varSet->getModel()->getMolecularMass3();  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
      // Collisional terms Rin, Ren, Rie
      const CFreal collMomentumSource_ex = _collMomentumSource[0];
      const CFreal collMomentumSource_ey = _collMomentumSource[1];  
      const CFreal collMomentumSource_ez = _collMomentumSource[2];  
      const CFreal collMomentumSource_ix = _collMomentumSource[3];
      const CFreal collMomentumSource_iy = _collMomentumSource[4];
      const CFreal collMomentumSource_iz = _collMomentumSource[5];
      const CFreal collMomentumSource_nx = _collMomentumSource[6];
      const CFreal collMomentumSource_ny = _collMomentumSource[7];
      const CFreal collMomentumSource_nz = _collMomentumSource[8];

      //YGM: added charge exchage terms:
      const CFreal chargexMomentumSource_ex = _chargexMomentumSource[0];
      const CFreal chargexMomentumSource_ey = _chargexMomentumSource[1];     
      const CFreal chargexMomentumSource_ez = _chargexMomentumSource[2];  
      const CFreal chargexMomentumSource_ix = _chargexMomentumSource[3];
      const CFreal chargexMomentumSource_iy = _chargexMomentumSource[4];
      const CFreal chargexMomentumSource_iz = _chargexMomentumSource[5];
      const CFreal chargexMomentumSource_nx = _chargexMomentumSource[6];
      const CFreal chargexMomentumSource_ny = _chargexMomentumSource[7];
      const CFreal chargexMomentumSource_nz = _chargexMomentumSource[8];

      //YGM: added gravity terms for momentum equations:
      const CFreal gravityMomentumSource_ex = _gravityMomentumSource[0]; 
      const CFreal gravityMomentumSource_ey = _gravityMomentumSource[1]; 
      const CFreal gravityMomentumSource_ez = _gravityMomentumSource[2]; 
      const CFreal gravityMomentumSource_ix = _gravityMomentumSource[3]; 
      const CFreal gravityMomentumSource_iy = _gravityMomentumSource[4]; 
      const CFreal gravityMomentumSource_iz = _gravityMomentumSource[5]; 
      const CFreal gravityMomentumSource_nx = _gravityMomentumSource[6]; 
      const CFreal gravityMomentumSource_ny = _gravityMomentumSource[7];    
      const CFreal gravityMomentumSource_nz = _gravityMomentumSource[8];    

      //YGM: source terms for the momentum equations
      source[11] = emMomentumXe + collMomentumSource_ex + GammaIon_i*me*un - GammaRec_n*me*ue + 
                chargexMomentumSource_ex + gravityMomentumSource_ex; //Electrons X momentum
      source[12] = emMomentumYe + collMomentumSource_ey + GammaIon_i*me*vn - GammaRec_n*me*ve +  
                chargexMomentumSource_ey + gravityMomentumSource_ey; //Electrons Y momentum
      source[13] = emMomentumZe + collMomentumSource_ez + GammaIon_i*me*wn - GammaRec_n*me*we +  
                chargexMomentumSource_ez + gravityMomentumSource_ez; //Electrons Z momentum
      source[14] = emMomentumXi + collMomentumSource_ix + GammaIon_i*mi*un - GammaRec_n*mi*ui +
                chargexMomentumSource_ix + gravityMomentumSource_ix; //Ions X momentum
      source[15] = emMomentumYi + collMomentumSource_iy + GammaIon_i*mi*vn - GammaRec_n*mi*vi +
                chargexMomentumSource_iy + gravityMomentumSource_iy; //Ions Y momentum
      source[16] = emMomentumZi + collMomentumSource_iz + GammaIon_i*mi*wn - GammaRec_n*mi*wi +
                chargexMomentumSource_iz + gravityMomentumSource_iz; //Ions Z momentum      
      source[17] = collMomentumSource_nx - GammaIon_i*mn*un + GammaRec_n*(mi*ui + me*ue) + 
                chargexMomentumSource_nx + gravityMomentumSource_nx; //Neutrals X momentum
      source[18] = collMomentumSource_ny - GammaIon_i*mn*vn + GammaRec_n*(mi*vi + me*ve) + 
                chargexMomentumSource_ny + gravityMomentumSource_ny; //Neutrals Y momentum
      source[19] = collMomentumSource_nz - GammaIon_i*mn*wn + GammaRec_n*(mi*wi + me*we) + 
                chargexMomentumSource_nz + gravityMomentumSource_nz; //Neutrals Z momentum
    
      
      //AAL: ENERGY
      //YGM: double check all equations
      const CFreal emEnergye = qpare*ue*_Etotal[XX] + qpare*ve*_Etotal[YY] + qpare*we*_Etotal[ZZ]; //electrons
      const CFreal emEnergyi = qpari*ui*_Etotal[XX] + qpari*vi*_Etotal[YY] + qpari*wi*_Etotal[ZZ]; //ions
      const CFreal collWorke = _collMomentumSource[0]*ue + _collMomentumSource[1]*ve + _collMomentumSource[2]*we;
      const CFreal collWorki = _collMomentumSource[3]*ui + _collMomentumSource[4]*vi + _collMomentumSource[5]*wi;
      const CFreal collWorkn = _collMomentumSource[6]*un + _collMomentumSource[7]*vn + _collMomentumSource[8]*wn;
      const CFreal PhiIon = 13.6*1.60217657e-19; //13.6eV to J
      const CFreal kinEnerIonRec_e = - 0.5*GammaRec_n*me*(ue*ue + ve*ve + we*we) + 0.5*GammaIon_i*me*(un*un + vn*vn + wn*wn);
      const CFreal kinEnerIonRec_i = 0.5*GammaRec_n*mi*(ui*ui + vi*vi + wi*wi) + 0.5*GammaIon_i*mi*(un*un + vn*vn + wn*wn);
      const CFreal kinEnerIonRec_n = 0.5*GammaRec_n*mi*(ui*ui + vi*vi + wi*wi) + 0.5*GammaRec_n*me*(ue*ue + ve*ve + we*we) - 0.5*GammaIon_i*mn*(un*un + vn*vn + wn*wn);
      const CFreal kinPhiIon_e = -GammaIon_i*PhiIon;

      //YGM: added work by charge exchane
      const CFreal chargexEnergySource_e = _chargexEnergySource[0]; //electrons
      const CFreal chargexEnergySource_i = _chargexEnergySource[1]; //ions
      const CFreal chargexEnergySource_n = _chargexEnergySource[2]; //neutrals

      //YGM: added work by gravity
      const CFreal gravityEnergySource_e = _gravityEnergySource[0]; //electrons
      const CFreal gravityEnergySource_i = _gravityEnergySource[1]; //ions
      const CFreal gravityEnergySource_n = _gravityEnergySource[2]; //neutrals

     
      //YGM: Energy Source Terms: check the equations below
      source[20] = emEnergye + collWorke + _collEnergySource[0] + _ReactEnergySource[0] + kinPhiIon_e + kinEnerIonRec_e +
                   gravityEnergySource_e; //Electrons Energy Source terms
      source[21] = emEnergyi + collWorki + _collEnergySource[1] + _ReactEnergySource[1] + kinEnerIonRec_i + 
                   chargexEnergySource_i + gravityEnergySource_i; //Ions Energy
      source[22] = collWorkn + _collEnergySource[2] + _ReactEnergySource[2] - kinEnerIonRec_n + 
                   chargexEnergySource_n + gravityEnergySource_n; //Neutrals Energy
      
      // AAL: Write the sockets
      //if (!this->getMethodData().isPerturb()) { // Condition to avoid writing when the source is perturbed
        //if(currState->isParUpdatable()) { // Condition to write only once the partition cells
          //GammaIon[elemID] = _GammaIon_n;
          //GammaRec[elemID] = _GammaRec_i;
        //}
      //}
  }
  // AAL: Don't forget to multiply by the volume!
  source *= volumes[elemID];
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::computeMassReactionsEnergySourceTerm()
{
  //************************************************************
  // AAL: This is the function where we compute _GammaIon_n, _GammaRec_i, _massSource[] and _ReactEnergySource
  //************************************************************

  _GammaIon_n = 0.;
  _GammaRec_i = 0.;
  
  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  const CFreal rho  = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 	        // electron density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	// ion density
  const CFreal rhon = rho*_physicalData[firstDensity + 2];	// neutrals density
  const CFreal Te   = _physicalData[firstTemperature];	        // electron Temperature
  const CFreal Ti   = _physicalData[firstTemperature + 4];	// ion Temperature
  const CFreal Tn   = _physicalData[firstTemperature + 8];      // neutrals Temperature
  

  ////Molecular Masses
  const CFreal me =  _varSet->getModel()->getMolecularMass1();              // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi =  _varSet->getModel()->getMolecularMass2();              // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn =  _varSet->getModel()->getMolecularMass3();              // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  ////electron properties
  const CFreal ne = rhoe/me;		   	// Electricolly neutral, i.e. ne = ni
  const CFreal Testar = Te/11604.50520;		// electrons temperature in eV. Thermal equilibrium is assumed Ti = Te
  ////ion properties
  const CFreal ni = rhoi/mi;		   	// Electricolly neutral, i.e. ne = ni
  const CFreal Tistar = Ti/11604.50520;		// electrons temperature in eV. Thermal equilibrium is assumed Ti = Te
  
  ////Neutrals and ions properties
   const CFreal nn = rhon/mn;			// neutral particle per unit volume
  //const CFreal ni = ne; //left-over from the MHD-nuetral module  // ion particle per unit volume
  
  //// IONIZATION
  ////constants Related to ionization frequency from [Leake, 2012]
  const CFreal A = 2.91e-14;
  const CFreal X = 0.232;
  const CFreal phiIonOvTe = 13.6/Testar;
  const CFreal K = 0.39;
  
  const CFreal nuIon = ne*A/(X + phiIonOvTe)*std::pow(phiIonOvTe, K)*std::exp(-phiIonOvTe);  // Ionization freq. in [s-1]
  _GammaIon_n = -nn*nuIon; //in units [m-3s-1]
   const CFreal GammaIon_n =  _GammaIon_n;
   const CFreal GammaIon_i = - _GammaIon_n; 
  // const CFreal GammaIon_e = GammaIon_i; not used
  //// RECOMBINATION
  ////constant related to recombination
  const CFreal Brec = 2.6e-19;
  const CFreal nuRec = ne/std::sqrt(Testar)*Brec;//[s-1]
  _GammaRec_i = - ni*nuRec;//in units [m-3s-1]
  const CFreal GammaRec_n = - _GammaRec_i;
  const CFreal GammaRec_i = _GammaRec_i;

  ////TOTAL (particles/m3)
  //YGM: mass source terms for the continuity equation; note that ionizationa 
  // and recombination rates for the electrons and ions are the same
  const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  const CFreal electronsParticlesRate = (GammaIon_i + GammaRec_i);
  const CFreal ionsParticlesRate     = (GammaIon_i + GammaRec_i);
  const CFreal neutralsParticlesRate = (GammaIon_n + GammaRec_n);
  
  ////RESULT
  _massSource[0] = me*electronsParticlesRate;
  _massSource[1] = mi*ionsParticlesRate;
  _massSource[2] = mn*neutralsParticlesRate;
  
  //YGM: check and discuss the reaction rates for the electrons below
  const CFreal Qion_i = 1.5*GammaIon_i*kB*Tn; // in units [kg m-1 s-3]
  const CFreal Qrec_n = 1.5*GammaRec_n*kB*Ti;
  const CFreal Qrec_e = - Qrec_n; //YGM: to be checked!!
  const CFreal Qion_n = - Qion_i; // in units [kg m-1 s-3]
  const CFreal Qrec_i = - Qrec_n;
 
  _ReactEnergySource[0] = (me/mn)*Qion_n - Qrec_e;   //electrons 
  _ReactEnergySource[1] = (mi/mn)*Qion_n - Qrec_i;   //ions
  _ReactEnergySource[2] = -Qion_n + Qrec_i;  //neutrals
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::computeElectricCurrent()
{
  //************************************************************
  // AAL: This is the function where we compute the total current, _J[]
  //************************************************************

  const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFreal firstDensity = _varSet->getModel()->getFirstScalarVar(0);

  //// Total Electromagnetic Field
  _Btotal[XX] = _physicalData[UPDATEVAR::PTERM::BX] + _NonInducedEMField[0];
  _Btotal[YY] = _physicalData[UPDATEVAR::PTERM::BY] + _NonInducedEMField[1];
  _Btotal[ZZ] = _physicalData[UPDATEVAR::PTERM::BZ] + _NonInducedEMField[2];
  _Etotal[XX] = _physicalData[UPDATEVAR::PTERM::EX] + _NonInducedEMField[3];
  _Etotal[YY] = _physicalData[UPDATEVAR::PTERM::EY] + _NonInducedEMField[4];
  _Etotal[ZZ] = _physicalData[UPDATEVAR::PTERM::EZ] + _NonInducedEMField[5];
  
  //// Particle velocities

    const CFreal ue = _physicalData[firstVelocity];
    const CFreal ve = _physicalData[firstVelocity + 1];
    const CFreal we = _physicalData[firstVelocity + 2];
    const CFreal ui = _physicalData[firstVelocity + 3];
    const CFreal vi = _physicalData[firstVelocity + 4];
    const CFreal wi = _physicalData[firstVelocity + 5];
    const CFreal un = _physicalData[firstVelocity + 6];
    const CFreal vn = _physicalData[firstVelocity + 7];
    const CFreal wn = _physicalData[firstVelocity + 8];
  
  //const CFreal eta = _electricalResistivity;
  //const CFreal sigma = 1/eta;
  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 		//electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
  const CFreal rhon = rho*_physicalData[firstDensity + 2];  
  
  const CFreal me =  _varSet->getModel()->getMolecularMass1();  // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi =  _varSet->getModel()->getMolecularMass2();  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn =  _varSet->getModel()->getMolecularMass3();  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings

 //YGM: check if we want to use the velocities to calculate the current, as this would mean Jz=0 in the 2D case! 

  const CFreal Jx = rhoe*me*ue + rhoi*mi*ui;
  const CFreal Jy = rhoe*me*ve + rhoi*mi*vi;
  const CFreal Jz = rhoe*me*we + rhoi*mi*wi;
 //YGM: to test for the 3fluid case take the Jzz current as a constant as in the 2 fluid case by Loverich et al. 2010/2011 2D reconnection
  //const CFreal Jz = sigma*(_Etotal[ZZ] + ui*_Btotal[YY] - vi*_Btotal[XX]); //left over from the MHD case
  
  _J[XX] = Jx;
  _J[YY] = Jy;
  _J[ZZ] = Jz;
}

///////////////////////
///////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::computeCollisionalMomentumEnergy()
{
  //************************************************************
  // AAL: This is the function where we compute the _collMomentumSource[] and _collEnergySource[]
  //************************************************************

  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  const CFreal firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFuint firstTemperature = _varSet->getModel()->getFirstScalarVar(2);
  
  //// particles density, temperature
//YGM: where and how do we define rho?
  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 		//electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
  const CFreal rhon = rho*_physicalData[firstDensity + 2]; 	//neutrals density
  
  const CFreal Te = _physicalData[firstTemperature];
  const CFreal Ti = _physicalData[firstTemperature + 4];
  const CFreal Tn = _physicalData[firstTemperature + 8];

    const CFreal ue = _physicalData[firstVelocity];
    const CFreal ve = _physicalData[firstVelocity + 1];
    const CFreal we = _physicalData[firstVelocity + 2];
    const CFreal ui = _physicalData[firstVelocity + 3];
    const CFreal vi = _physicalData[firstVelocity + 4];
    const CFreal wi = _physicalData[firstVelocity + 5];
    const CFreal un = _physicalData[firstVelocity + 6];
    const CFreal vn = _physicalData[firstVelocity + 7];
    const CFreal wn = _physicalData[firstVelocity + 8];
  
  //// particle mass
  const CFreal me =  _varSet->getModel()->getMolecularMass1();  // Electron's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mi =  _varSet->getModel()->getMolecularMass2();  // Proton's mass [kg] source:Standart Handbook for Electrical Engineerings
  const CFreal mn =  _varSet->getModel()->getMolecularMass3();  // Neutral's mass [kg] source:Standart Handbook for Electrical Engineerings
  
  //// particles per volume
  const CFreal ne = rhoe/me;
  const CFreal ni = rhoi/mi;
  const CFreal nn = rhon/mn;
  
  ////parameters
  const CFreal m_in = mi*mn/(mi + mn);
  const CFreal Sigma_in = 1.41e-19;		//collisional cross-section m2 from [Draine:83]; 1.16e-18 [Leake]
  const CFreal T_in = (Ti + Tn)/2.;
  const CFreal kB = Framework::PhysicalConsts::Boltzmann(); // Boltzmann constant
  const CFreal pi = MathTools::MathConsts::CFrealPi(); //Pi number
//YGM: check the value of Sigma_en!
  const CFreal m_en = me*mn/(me + mn);
  const CFreal Sigma_en = 1.41e-19;		//collisional cross-section m2 for electrons-neutrals
  const CFreal T_en = (Te + Tn)/2.;  
  const CFreal m_ie = mi*me/(mi + me);
//YGM: check the value of Sigma_ie!
  const CFreal Sigma_ie = 1.41e-19;		//collisional cross-section m2 for electrons ions
  const CFreal T_ie = (Ti + Te)/2.; 

  ////collision Frequency
  const CFreal nu_in = nn*Sigma_in*std::sqrt(8.*kB*T_in/(pi*m_in));
  const CFreal m_n_nu_in = m_in*ni*nu_in;
  const CFreal Rin_ix = m_n_nu_in*(un - ui);
  const CFreal Rin_iy = m_n_nu_in*(vn - vi);
  const CFreal Rin_iz = m_n_nu_in*(wn - wi);

 //YGM: added the e-i and e-n collisions
  const CFreal nu_en = nn*Sigma_en*std::sqrt(8.*kB*T_en/(pi*m_en));
  const CFreal m_n_nu_en = m_en*ne*nu_en;
  const CFreal Ren_ex = m_n_nu_en*(un - ue);
  const CFreal Ren_ey = m_n_nu_en*(vn - ve);
  const CFreal Ren_ez = m_n_nu_en*(wn - we);
  const CFreal nu_ie = ne*Sigma_ie*std::sqrt(8.*kB*T_ie/(pi*m_ie));
  const CFreal m_n_nu_ie = m_ie*ni*nu_ie;
  const CFreal Rie_ix = m_n_nu_ie*(ue - ui);
  const CFreal Rie_iy = m_n_nu_ie*(ve - vi);
  const CFreal Rie_iz = m_n_nu_ie*(we - wi);
  
  ////electrons momentum
  _collMomentumSource[0] = Ren_ex - Rie_ix;
  _collMomentumSource[1] = Ren_ey - Rie_iy;
  _collMomentumSource[2] = Ren_ez - Rie_iz;

  ////ions momentum
  _collMomentumSource[3] = Rin_ix + Rie_ix;
  _collMomentumSource[4] = Rin_iy + Rie_iy;
  _collMomentumSource[5] = Rin_iz + Rie_iz;

  ////neutrals momentum
  _collMomentumSource[6] = -Rin_ix - Ren_ex;
  _collMomentumSource[7] = -Rin_iy - Ren_ey;
  _collMomentumSource[8] = -Rin_iz - Ren_ez; 

  //YGM: charge exchange terms in the momentum
  const CFreal vthi2 = 2.*kB*Ti/(pi*mi);//squared thermal speed of ions
  const CFreal vthn2 = 2.*kB*Tn/(pi*mn); //squared thermal speed of neutrals
  const CFreal dvin2 = ui*ui + vi*vi + wi*wi -2.*(ui*un + vi*vn + wi*wn) + 
                        un*un + vn*vn + wn*wn;//squared velocity difference between "i" and "n" 
  const CFreal Vcx = std::sqrt(4.*vthi2/pi + 4.*vthn2/pi + dvin2); // units [m/s]
  const CFreal Sigma_cx0 = 1.12e-18; //in units [m2], see Meier and Shumlak 2012, p.7, Eq. 18  
  const CFreal Sigma_cx1 = 7.15e-20*std::log(Vcx);//in units [m2], see Meier and Shumlak 2012, p.7, Eq. 18
  //YGM: put Sigma_cx = std::max(Sigma_cx0,Sigma_cx1) as not clear from Meier's works which one is more relevant (see thesis)
  const CFreal Sigma_cx = std::max(Sigma_cx0,Sigma_cx1); //units [m2]
  const CFreal Gammacx = Sigma_cx*ni*nn*Vcx; //units [m-3s-1]
  const CFreal Rcxin_X = -mi*Sigma_cx*ni*nn*(ui-un)*vthn2/std::sqrt(16.*vthi2/pi + 4.*dvin2 + 9.*pi*vthn2/4.);
  const CFreal Rcxin_Y = -mi*Sigma_cx*ni*nn*(vi-vn)*vthn2/std::sqrt(16.*vthi2/pi + 4.*dvin2 + 9.*pi*vthn2/4.);
  const CFreal Rcxin_Z = -mi*Sigma_cx*ni*nn*(wi-wn)*vthn2/std::sqrt(16.*vthi2/pi + 4.*dvin2 + 9.*pi*vthn2/4.);
  const CFreal Rcxni_X = mi*Sigma_cx*ni*nn*(ui-un)*vthi2/std::sqrt(16.*vthn2/pi + 4.*dvin2 + 9.*pi*vthi2/4.);
  const CFreal Rcxni_Y = mi*Sigma_cx*ni*nn*(vi-vn)*vthi2/std::sqrt(16.*vthn2/pi + 4.*dvin2 + 9.*pi*vthi2/4.);
  const CFreal Rcxni_Z = mi*Sigma_cx*ni*nn*(wi-wn)*vthi2/std::sqrt(16.*vthn2/pi + 4.*dvin2 + 9.*pi*vthi2/4.);

  ////electrons momentum
  _chargexMomentumSource[0] = 0.;
  _chargexMomentumSource[1] = 0.;
  _chargexMomentumSource[2] = 0.;

  ////ions momentum
  _chargexMomentumSource[3] = Gammacx*mi*(un-ui)+ Rcxin_X - Rcxni_X;
  _chargexMomentumSource[4] = Gammacx*mi*(vn-vi)+ Rcxin_Y - Rcxni_Y;
  _chargexMomentumSource[5] = Gammacx*mi*(wn-wi)+ Rcxin_Z - Rcxni_Z;

  ////neutrals momentum
  _chargexMomentumSource[6] = -Gammacx*mi*(un-ui) - Rcxin_X + Rcxni_X;
  _chargexMomentumSource[7] = -Gammacx*mi*(vn-vi) - Rcxin_Y + Rcxni_Y;
  _chargexMomentumSource[8] = -Gammacx*mi*(wn-wi) - Rcxin_Z + Rcxni_Z;

  //YGM: Source terms for the energy equations:
  const CFreal Qcxin = (3./4.)*Sigma_cx*mi*ni*nn*vthn2*std::sqrt(4.*vthi2/pi + 64.*vthn2/(9.*pi) + dvin2);
  const CFreal Qcxni = (3./4.)*Sigma_cx*mi*ni*nn*vthi2*std::sqrt(4.*vthn2/pi + 64.*vthi2/(9.*pi) + dvin2);

  _chargexEnergySource[0] = 0.;
  _chargexEnergySource[1] = 0.5*Gammacx*mi*(un*un + vn*vn + wn*wn - ui*ui - vi*vi - wi*wi) + un*Rcxin_X + vn*Rcxin_Y + wn*Rcxin_Z - ui*Rcxni_X - vi*Rcxni_Y - wi*Rcxni_Z + Qcxin - Qcxni;
  _chargexEnergySource[2] = - 0.5*Gammacx*mi*(un*un + vn*vn + wn*wn - ui*ui - vi*vi - wi*wi) + ui*Rcxni_X + vi*Rcxni_Y + wi*Rcxni_Z - un*Rcxin_X - vn*Rcxin_Y - wn*Rcxin_Z + Qcxni - Qcxni;

  //const CFreal kinEnergin_i = 0.5*(Rin_ix*(un - ui) + Rin_iy*(vn - vi)); //exchange due to different kinetic energy
  //const CFreal intEnergin_i = 3.*m_n_nu/mi*kB*(Tn - Ti); // exchange due to different temperatures
  //YGM: source term in electron energy eqn due to collisions with ions
  //YGM: which Qie_e or Qei_e, CAREFULLY CHECK THE TERM Qie_e BELOW!!!
  //YGM: Example: Qin_i is the source in ions energy due to collisions with neutrals
  const CFreal Qen_e = 0.5*(Ren_ex*(un - ue) + Ren_ey*(vn - ve) + Ren_ez*(wn - we)) + 3.*m_n_nu_en/me*kB*(Tn - Te); // [kg m-1 s-3]
  const CFreal Qin_i = 0.5*(Rin_ix*(un - ui) + Rin_iy*(vn - vi) + Rin_iz*(wn - wi)) + 3.*m_n_nu_in/mi*kB*(Tn - Ti);  // [kg m-1 s-3]  
  const CFreal Qie_i = 0.5*(Rie_ix*(ue - ui) + Rie_iy*(ve - vi) + Rie_iz*(we - wi)) + 3.*m_n_nu_ie/mi*kB*(Te - Ti);
  const CFreal Qie_e = - Qie_i;    
  const CFreal Qin_n = - Qin_i;
  const CFreal Qen_n = - Qen_e;
    //const CFreal Rie_ex = Rie_ix;
    //const CFreal Rie_ey = Rie_iy;
    //const CFreal Rin_nx = Rin_ix;
    //const CFreal Rin_ny = Rin_iy;
    //const CFreal Ren_nx = Ren_ex;
    //const CFreal Ren_nx = Ren_ey;
    //const CFreal Qie_e = 0.5*(Rie_ex*(ue - ui) + Rie_ey*(ve - vi)) + 3.*m_n_nu_ie/mi*kB*(Te - Ti);    
    //const CFreal Qin_n = 0.5*(Rin_nx*(un - ui) + Rin_ny*(vn - vi)) + 3.*m_n_nu_in/mi*kB*(Tn - Ti);
    //const CFreal Qen_n = 0.5*(Ren_nx*(un - ue) + Ren_ny*(vn - ve)) + 3.*m_n_nu_ie/mi*kB*(Tn - Te);
  //YGM: NB! the term Qen_e below needs to be checked carefully = possible typo in Meier and Shumlak, 2012!
  _collEnergySource[0] = Qie_e + Qen_e;   // electrons
  _collEnergySource[1] = Qin_i + Qie_i;   // ions
  _collEnergySource[2] = Qin_n + Qen_n;  // neutrals

}

///////////////////////////////////////////////////////

template <class UPDATEVAR>
void ThreeFluidMHDST3D<UPDATEVAR>::computegravityTerms(){

  const CFuint firstDensity = _varSet->getModel()->getFirstScalarVar(0);
  //// particles density

  const CFreal rho = _physicalData[UPDATEVAR::PTERM::RHO];
  const CFreal rhoe = rho*_physicalData[firstDensity]; 		//electrons density
  const CFreal rhoi = rho*_physicalData[firstDensity + 1]; 	//ions density
  const CFreal rhon = rho*_physicalData[firstDensity + 2]; 	//neutrals density

  //// particles velociy
  const CFuint firstVelocity = _varSet->getModel()->getFirstScalarVar(1);
  const CFreal ue = _physicalData[firstVelocity];
  const CFreal ve = _physicalData[firstVelocity + 1];
  const CFreal we = _physicalData[firstVelocity + 2];
  const CFreal ui = _physicalData[firstVelocity + 3];
  const CFreal vi = _physicalData[firstVelocity + 4];
  const CFreal wi = _physicalData[firstVelocity + 5];
  const CFreal un = _physicalData[firstVelocity + 6];
  const CFreal vn = _physicalData[firstVelocity + 7];
  const CFreal wn = _physicalData[firstVelocity + 8];

  //YGM: gravity momentum source term
  const CFreal gsun = -274.78; //[m/s2] from Wiki; //G=6.674e-11;//[m/kg]^2
  const CFreal gx = 0.;
  const CFreal gy = 0.;
  const CFreal gz = gsun;

  _gravityMomentumSource[0]=rhoe*gx;
  _gravityMomentumSource[1]=rhoe*gy;
  _gravityMomentumSource[2]=rhoe*gz;
  _gravityMomentumSource[3]=rhoi*gx;
  _gravityMomentumSource[4]=rhoi*gy;
  _gravityMomentumSource[5]=rhoi*gz;
  _gravityMomentumSource[6]=rhon*gx;
  _gravityMomentumSource[7]=rhon*gy;
  _gravityMomentumSource[8]=rhon*gz;

  //Include the work due to gravity
  _gravityEnergySource[0]=rhoe*(ue*gx + ve*gy + we*gz);
  _gravityEnergySource[1]=rhoi*(ui*gx + vi*gy + wi*gz);
  _gravityEnergySource[2]=rhon*(un*gx + vn*gy + wn*gz);

}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
