#include "Framework/MeshData.hh"  

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolumeArcJet {

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
ArcJetInsulatedWall<BASE>::
ArcJetInsulatedWall(const std::string& name) :
  BASE(name)
{
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
ArcJetInsulatedWall<BASE>::~ArcJetInsulatedWall()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void ArcJetInsulatedWall<BASE>::setup()
{
  BASE::setup();
}
      
//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void ArcJetInsulatedWall<BASE>::setGhostState
(Framework::GeometricEntity *const face)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;
  
  const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();
  const CFuint nbEqs = PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getNbEqsSS();
  const CFuint eqSSID = PhysicalModelStack::getActive()->getEquationSubSysDescriptor().getEqSS();
  
  if (nbEqs != 4 || (nbEqs == 4 && eqSSID == 0) || nbEqs == totalNbEqs) {
    BASE::setGhostState(face);
  }
  
  // here it is assumed that the ArcJet induction equations are the last ones 
 if ((nbEqs == 4 && eqSSID == 1) || nbEqs == totalNbEqs) {
    State *const innerState = face->getState(0);
    State *const ghostState = face->getState(1);
    
    ///@TODO assumption r=y !! everywhere in the code ...
    const CFreal rI = innerState->getCoordinates()[YY];
    const CFuint iBx = innerState->size() - 4;
    const CFuint iBy = innerState->size() - 3;
    const CFuint iBz = innerState->size() - 2;
    const CFuint iphi = innerState->size() - 1;
    
    // const CFreal rRatio = rI/ghostState->getCoordinates()[YY];
    // cf_assert(rRatio > 0.);
    
    (*ghostState)[iBx] =   (*innerState)[iBx];
    (*ghostState)[iBy] =   (*innerState)[iBy];
    (*ghostState)[iBz] =   (*innerState)[iBz];
    (*ghostState)[iphi] = -(*innerState)[iphi];
    
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
