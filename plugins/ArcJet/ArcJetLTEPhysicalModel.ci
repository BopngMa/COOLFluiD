#include <valarray>

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Physics {

    namespace ArcJet {

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
void ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFuint >
    ("nbTurbEqs","Number of turbulent equations.");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::
ArcJetLTEPhysicalModel(const std::string& name)
  : Framework::ConvectionDiffusionReactionPM
    <CTERM, ArcJetTerm<DTERM>, ArcJetTerm<Framework::BaseTerm> >(name)
{
  this->addConfigOptionsTo(this);
  
  m_nbTurbEqs = 0;
  this->setParameter("nbTurbEqs",&m_nbTurbEqs);
}	

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::~ArcJetLTEPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
CFuint ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
CFuint ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::getNbEquations() const
{
  // set the number of induction equations
  std::valarray<CFuint> v;
  if (m_nbTurbEqs > 0) {
    v.resize(2);
    v[0] = m_nbTurbEqs; 
    v[1] = 1;
  }
  else {
    v.resize(1);
    v[0] = 1;
  }
  this->getConvTerm()->setNbScalarVars(v);
  return DIM+2+1+m_nbTurbEqs; // one charge conservation equation
}

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
std::string ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::getConvectiveName() const
{
  return this->getTypeName();
}

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
void ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::setReferenceValues()
{
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  
  SafePtr<CTERM> convTerm = this->getConvTerm();
  SafePtr<ArcJetTerm<DTERM> > diffTerm = this->getDiffTerm();
  SafePtr<ArcJetTerm<BaseTerm> > srcTerm = this->getSrcTerm();
  
  // reference values for the convective part
  RealVector& refDataConv = convTerm->getReferencePhysicalData();
  // reference values for the diffusive part
  RealVector& refDataDiff = diffTerm->getReferencePhysicalData();
  // reference values for the reaction (source) part
  RealVector& refDataSrc = srcTerm->getReferencePhysicalData();

  // override the reference values for Euler data starting from
  CFout << "WATCH OUT: Equations will be solved dimensionally." << "\n";

  refDataConv = 1.0;
  refDataDiff = 1.0;
  refDataSrc  = 1.0;

  // the constant of real gas, density, thermodynamic pressure and Cv
  // set to infinite dimensional values
  convTerm->setRRef(convTerm->getRdim());

  // reference values set to 1.0
  convTerm->setTempRef(1.0);
  convTerm->setPressRef(1.0);

  // scaling coefficient for the momentum equations
  diffTerm->setCoeffTau(1.0);

  // scaling coefficient for the energy equation
  diffTerm->setCoeffQ(1.0);

  this->_isAdimensional = false;
}

//////////////////////////////////////////////////////////////////////////////

template <typename CTERM, typename DTERM, int DIM>
void ArcJetLTEPhysicalModel<CTERM, DTERM, DIM>::configure 
( Config::ConfigArgs& args )
{
  using namespace COOLFluiD::Framework;
  
  ConvectionDiffusionReactionPM
    <CTERM, ArcJetTerm<DTERM>, ArcJetTerm<BaseTerm> >::configure(args);
  
  cf_assert(getDimension() > 0);
  cf_assert(getNbEquations() > 0);
  
  // allocate jacobians
  this->_jacobians = std::vector<RealMatrix>(DIM);
  for (CFuint i = 0; i < getDimension(); ++i) {
    this->_jacobians[i].resize(getNbEquations(), getNbEquations());
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace ArcJet

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
