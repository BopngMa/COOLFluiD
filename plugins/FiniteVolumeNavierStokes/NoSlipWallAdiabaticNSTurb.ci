#include "Framework/MeshData.hh"
#include "NavierStokes/NSTurbTerm.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
void NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::
defineConfigOptions(Config::OptionList& options)
{
   options.template addConfigOption< CFreal >("yWallVelocity","Y-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("xWallVelocity","X-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("zWallVelocity","Z-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("KWall","Wall value for turbulent intensity");
   options.template addConfigOption< CFreal >("KGhostMin","Minimum turb. intensity in the ghost state");
}

//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::
NoSlipWallAdiabaticNSTurb(const std::string& name) :
  FVMCC_BC(name),
  _varSetTurb(CFNULL),
  _diffVarTurb(CFNULL),
  _xWallVelocity(0.),
  _yWallVelocity(0.),
  m_kID(4),
  m_ghostK(0.)
{
  this->addConfigOptionsTo(this);
  
  this->setParameter("xWallVelocity",&_xWallVelocity);
  this->setParameter("yWallVelocity",&_yWallVelocity);
  this->setParameter("zWallVelocity",&_zWallVelocity);
  
  m_wallK = 1.e-8;
  setParameter("KWall",&m_wallK);
  
  m_ghostKMin = 0.0;
  setParameter("KGhostMin",&m_ghostKMin);
}

//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::~NoSlipWallAdiabaticNSTurb()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
void NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::setup()
{
  CFAUTOTRACE;
  
  FVMCC_BC::setup();
  
  _varSetTurb = this->getMethodData().getUpdateVar().template d_castTo<ConvTurbVarSet>();
  _diffVarTurb = this->getMethodData().getDiffusiveVar().template d_castTo<DiffTurbVarSet>();
  
  _xWallVelocity /= _varSetTurb->getModel()->getVelRef();
  _yWallVelocity /= _varSetTurb->getModel()->getVelRef();
  _zWallVelocity /= _varSetTurb->getModel()->getVelRef();
  
  cf_assert(m_wallK >= 0.0);
  
  // set the kID
  const CFuint dim = Framework::PhysicalModelStack::getActive()->getDim();
  m_kID = dim + 2;
  cf_assert((dim == DIM_2D && m_kID == 4) || (dim == DIM_3D && m_kID == 5));
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
void NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::
setGhostState(Framework::GeometricEntity *const face)
{
  this->computeGhostPosition(face);
  setGhostStateImpl(*face->getState(0), *face->getState(1));
}


//////////////////////////////////////////////////////////////////////////////

template <typename ConvTurbVarSet, typename DiffTurbVarSet>
void NoSlipWallAdiabaticNSTurb<ConvTurbVarSet, DiffTurbVarSet>::setGhostStateImpl
(const Framework::State& innerState, Framework::State& ghostState)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::MathTools;
  
  // here a fix is needed in order to have always m_ghostK > 0
  // dynamic relocation of the ghost state: the position of the
  // ghost state is locally changed, and the BC is imposed
  // using a weighted average of ghost state (in the new location)
  // and inner state
  const CFreal innerK = innerState[m_kID];
  this->repositionNode(innerK, m_ghostK, m_wallK, m_ghostKMin);
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const CFuint TID = m_kID-1;
  cf_assert((dim == DIM_2D && TID == 3) || (dim == DIM_3D && TID == 4));
  
  const CFreal innerP = innerState[0];
  const CFreal innerT = innerState[TID];
  const CFreal innerDensity = innerP / (_varSetTurb->getModel()->getR() * innerT);
  
  //   const CFreal innerSoundSpeed = sqrt(_varSetTurb->getModel()->getR()*_varSetTurb->getModel()->getGamma()*innerT);
  //   const CFreal innerVel = sqrt(innerU*innerU + innerV*innerV);
  //   const CFreal normalVel = m_faceNormal[0]*innerU + m_faceNormal[1]*innerV;
  // 
  //Modification of the pressure to avoid pressure oscillations at the wall
  //see article from M-S Liou, A sequel to AUSM: AUSM+, JCP 129 364-382 (1996)
  //Here, the velocity is not the normal velocity because it relates to the u+-a eigen values
  //   CFreal pressureCorrection = sqrt(innerVel*innerVel) * innerDensity * innerSoundSpeed;
  const CFreal wallPressure = innerP;
  //   if(normalVel < 0.) wallPressure += pressureCorrection ;
  //   else wallPressure -= pressureCorrection;
  
  cf_assert(innerP > 0.);
  cf_assert(innerT > 0.);
  
  // reset the ghost node with the new position
  ghostState.getCoordinates() = m_tempGhostNode;
  
  // here we assume that we are in Puvt (K Omega) variables
  ghostState[0] = wallPressure;
  
  // velocity components are reconstructed
  this->linearInterpolate(innerState[1], _xWallVelocity, ghostState[1]);
  this->linearInterpolate(innerState[2], _yWallVelocity, ghostState[2]);
  if (dim == DIM_3D) {
    this->linearInterpolate(innerState[3], _zWallVelocity, ghostState[3]);
  }
  
  ghostState[TID] = innerState[TID];
  ghostState[m_kID] = m_ghostK; 
  
  const CFuint nbTurbVars = _varSetTurb->getModel()->getNbScalarVars(0);
  if(nbTurbVars == 2){
    
    //Compute distance to innerstate
    CFreal y0 = m_drXiXw;
    
    //avoid too small distances
    y0 = std::max(y0, 10.e-10);
    
    const CFreal pdim =  innerState[0] * _varSetTurb->getModel()->getPressRef();
    const CFreal Tdim =  innerState[TID] * _varSetTurb->getModel()->getTempRef();
    const CFreal mu = _diffVarTurb->getModel().getDynViscosityDim(pdim, Tdim)/
      (_diffVarTurb->getModel().getReferencePhysicalData())[NSTurbTerm::MU];
    
    CFreal nu = mu / innerDensity;
    
    //this is not the best, but it avoids having to code another BC! because I
    //would have to dynamic cast to the KOmega varset to get the beta1
    const CFreal beta1 = 0.075;
      
    ///@todo here should this be adimensionalized (by the distance)???
    //Menter's definition
    const CFreal omegaWall = (10. * 6. * nu) / (beta1 * y0 * y0);
    
    const CFuint omegaID = m_kID+1; 
    cf_assert((dim == DIM_2D && omegaID == 5) || (dim == DIM_3D && omegaID == 6));
    
    //Wilcox's definition
    //CFreal omegaWall = (1. * 6. * nu) / (beta1 * y0 * y0);
    this->linearInterpolate(innerState[omegaID], omegaWall, ghostState[omegaID]);
    
    if(ghostState[omegaID] < 0.) {
      ghostState[omegaID] = innerState[omegaID];
    }
  }
}
      
//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
