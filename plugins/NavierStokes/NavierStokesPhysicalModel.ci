namespace COOLFluiD {

  namespace Physics {

    namespace NavierStokes {

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
NavierStokesPhysicalModel<DIM>::NavierStokesPhysicalModel(const std::string& name)
  : Framework::ConvectionDiffusionPM<EulerTerm, NSTerm>(name)
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
NavierStokesPhysicalModel<DIM>::~NavierStokesPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint NavierStokesPhysicalModel<DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint NavierStokesPhysicalModel<DIM>::getNbEquations() const
{
  return DIM+2;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string NavierStokesPhysicalModel<DIM>::getConvectiveName() const
{
  if (DIM == 1) return "Euler1D";
  if (DIM == 2) return "Euler2D";
  cf_assert (DIM == 3);
  return "Euler3D";
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string NavierStokesPhysicalModel<DIM>::getDiffusiveName() const
{
  return getTypeName();
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void NavierStokesPhysicalModel<DIM>::setReferenceValues()
{
  (!getConvTerm()->isIncompressible()) ?
    setReferenceValuesCompressible() : setReferenceValuesIncompressible();
}
      
//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void NavierStokesPhysicalModel<DIM>::setReferenceValuesCompressible()
{
  using namespace COOLFluiD::Common;
  
  SafePtr<EulerTerm> convTerm = getConvTerm();
  SafePtr<NSTerm> diffTerm = getDiffTerm();
  
  const CFreal tempRef = convTerm->getTempRef();
  CFreal pRef    = convTerm->getPressRef();
  const CFreal MachInf = convTerm->getMachInf();
  const CFreal Uinf = MachInf*std::sqrt(convTerm->getGamma()*convTerm->getRdim()*tempRef);
  const CFreal refSpeed = std::sqrt(convTerm->getRdim()*tempRef);
  
  if (pRef <= 0.) {
    CFLog (VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesCompressible() => WATCH OUT: pRef is not defined. Computing reference viscosity with zero pressure.\n");
    CFLog (VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesCompressible() => OK, for Sutherland law and fixed dynamic viscosity\n");
    CFLog (VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesCompressible() => pRef should be defined for fixed kinematic viscosity\n");
  }
  
  const CFreal dynViscosityRef = getDiffTerm()->getDynViscosityDim(pRef, tempRef);
  const CFreal gamma = convTerm->getGamma();
  const CFreal cp = convTerm->getRdim()*gamma/(gamma - 1.);
  const CFreal Re = diffTerm->getReynolds();
  
  // reference values for the diffusive part
  RealVector& refDataDiff = diffTerm->getReferencePhysicalData();
  // reference values for the convective part
  RealVector& refDataConv = convTerm->getReferencePhysicalData();
  
  // set the reference values
  refDataDiff[NSTerm::MU]     = dynViscosityRef;
  refDataDiff[NSTerm::LAMBDA] = dynViscosityRef*cp/diffTerm->getPrandtl();
  refDataDiff[NSTerm::RE]     = Re;
  
  // override the reference values for Euler data starting from
  // machInf, tempRef, RRref, Lref, ReynoldsRef
  if ((tempRef > 0.) && (MachInf > 0.) && (Re > 0.)) {
    const CFreal Lref = getRefLength();
    
    refDataConv[EulerTerm::V]  = refSpeed;
    refDataConv[EulerTerm::VX] = refSpeed;
    refDataConv[EulerTerm::VY] = refSpeed;
    refDataConv[EulerTerm::VZ] = refSpeed;
    
    // rhoref = rho at infinity
    refDataConv[EulerTerm::RHO] = Re*dynViscosityRef/(Uinf*Lref);
    
    // pref = p at infinity
    pRef = refDataConv[EulerTerm::RHO]*convTerm->getRdim()*tempRef;
    refDataConv[EulerTerm::P] = pRef;
    refDataConv[EulerTerm::H] = refSpeed*refSpeed;
    refDataConv[EulerTerm::E] = refSpeed*refSpeed;
    refDataConv[EulerTerm::A] = refSpeed;
    refDataConv[EulerTerm::T] = tempRef;
    
    convTerm->setTempRef(tempRef);
    convTerm->setPressRef(refDataConv[EulerTerm::P]);
    convTerm->setRRef(1.0);
    
    const CFreal invReynolds = 1./Re;
    const CFreal coeffTau = std::sqrt(gamma)*MachInf*invReynolds;
    // scaling coefficient for the momentum equations
    diffTerm->setCoeffTau(coeffTau);
    // scaling coefficient for the energy equation
    diffTerm->setCoeffQ(coeffTau*gamma/((gamma-1.)*diffTerm->getPrandtl()));
    // cp/Pr disappears in adimensionalization
    diffTerm->setCpOverPrandtl(1.0);
    
    _isAdimensional = true;
  }
  else {
    CFLog(VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesCompressible() => tempRef or machInf or Re missing" << "\n");
    CFLog(VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesCompressible() => Equations will be solved dimensionally" << "\n");
    
    // if the pressure and temperature reference values
    // have not been specified set all the ref values to 1.
    refDataConv = 1.0;
    refDataDiff = 1.0;
    convTerm->setRRef(convTerm->getRdim());
    convTerm->setTempRef(1.0);
    convTerm->setPressRef(1.0);
    // scaling coefficient for the momentum equations
    diffTerm->setCoeffTau(1.0);
    // scaling coefficient for the energy equation
    diffTerm->setCoeffQ(1.0);
    
    // set the cp over prandtl
    const CFreal cpOverPrandtl = gamma/(gamma - 1.)*convTerm->getRdim()/diffTerm->getPrandtl();
    diffTerm->setCpOverPrandtl(cpOverPrandtl);
    
    _isAdimensional = false;
  }
  
  CFLog(VERBOSE, "tempRef = "   << convTerm->getTempRef() << "\n");
  CFLog(VERBOSE, "pRef    = "    << convTerm->getPressRef() << "\n");
  CFLog(VERBOSE, "rhoRef  = "  << refDataConv[EulerTerm::RHO] << "\n");
  CFLog(VERBOSE, "machInf = " << MachInf << "\n");
  CFLog(VERBOSE, "Uinf    = " << Uinf << "\n");
  CFLog(VERBOSE, "dynViscosityRef   = " << refDataDiff[NSTerm::MU]     << "\n");
  CFLog(VERBOSE, "thermConductivity = " << refDataDiff[NSTerm::LAMBDA] << "\n");
  CFLog(VERBOSE, "ReynoldsRef       = " << Re << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void NavierStokesPhysicalModel<DIM>::setReferenceValuesIncompressible()
{
  using namespace COOLFluiD::Common;
  
  SafePtr<EulerTerm> convTerm = getConvTerm();
  SafePtr<NSTerm> diffTerm = getDiffTerm();
  
  // T_inf, u_inf, Re_inf and L needed for adimensionalization
  const CFreal tempRef = convTerm->getTempRef();
  const CFreal Uinf = convTerm->getVelInf();
  const CFreal Re = diffTerm->getReynolds(); // reynolds number
  const CFreal gamma = convTerm->getGamma();
  const CFreal cp = convTerm->getRdim()*gamma/(gamma - 1.);
  
  // reference values for the diffusive part
  RealVector& refDataDiff = diffTerm->getReferencePhysicalData();
  // reference values for the convective part
  RealVector& refDataConv = convTerm->getReferencePhysicalData();
  
  // override the reference values for Euler data starting from
  // machInf, tempRef, RRref, Lref, ReynoldsRef
  if ((tempRef > 0.) && (Uinf > 0.) && (Re > 0.)) {
    const CFreal dynViscosityRef = getDiffTerm()->getDynViscosityDim(0.0, tempRef);
    cf_assert(dynViscosityRef > 0.);
    
    // set the reference values
    refDataDiff[NSTerm::MU] = dynViscosityRef;
    refDataDiff[NSTerm::LAMBDA] = dynViscosityRef*cp/diffTerm->getPrandtl();
    refDataDiff[NSTerm::RE] = Re;
    
    const CFreal Lref = getRefLength();
    
    // rhoref = rho at infinity
    refDataConv[EulerTerm::RHO] = Re*dynViscosityRef/(Uinf*Lref);
    refDataConv[EulerTerm::V]  = Uinf;
    refDataConv[EulerTerm::VX] = Uinf;
    refDataConv[EulerTerm::VY] = Uinf;
    refDataConv[EulerTerm::VZ] = Uinf;
    
    // this may not be an optimal choice
    refDataConv[EulerTerm::P] = refDataConv[EulerTerm::RHO]*convTerm->getRdim()*tempRef;
    refDataConv[EulerTerm::H] = Uinf*Uinf;
    refDataConv[EulerTerm::E] = Uinf*Uinf;
    refDataConv[EulerTerm::T] = tempRef;
    refDataConv[EulerTerm::A] = Uinf;
    
    convTerm->setTempRef(refDataConv[EulerTerm::T]);
    convTerm->setPressRef(refDataConv[EulerTerm::P]);
    convTerm->setRRef(1.0);
        
    const CFreal coeffTau = 1./Re;
    // scaling coefficient for the momentum equations
    diffTerm->setCoeffTau(coeffTau);
    // scaling coefficient for the energy equation
    diffTerm->setCoeffQ(coeffTau*cp*tempRef/(diffTerm->getPrandtl()*Uinf*Uinf));
    diffTerm->setCpOverPrandtl(1.);
    
    CFLog(VERBOSE, "dynViscosityRef   = " << refDataDiff[NSTerm::MU] << "\n");
    CFLog(VERBOSE, "thermConductivity = " << refDataDiff[NSTerm::LAMBDA] << "\n");
    CFLog(VERBOSE, "ReynoldsRef       = " << Re << "\n");
    CFLog(VERBOSE, "Uinf              = " << Uinf << "\n");
    
    _isAdimensional = true;
  }
  else {
    CFLog(VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesIncompressible() => tempRef or machInf or Re missing" << "\n");
    CFLog(VERBOSE, "NavierStokesPhysicalModel::setReferenceValuesIncompressible() => Equations will be solved dimensionally" << "\n");
    
    // if the pressure and temperature reference values
    // have not been specified set all the ref values to 1.
    refDataConv = 1.0;
    refDataDiff = 1.0;
    
    convTerm->setRRef(convTerm->getRdim());
    convTerm->setTempRef(1.0);
    convTerm->setPressRef(1.0);
    // scaling coefficient for the momentum equations
    diffTerm->setCoeffTau(1.0);
    // scaling coefficient for the energy equation
    diffTerm->setCoeffQ(1.0);
    
    // set the cp over prandtl
    const CFreal cpOverPrandtl = gamma/(gamma - 1.)*convTerm->getRdim()/diffTerm->getPrandtl();
    diffTerm->setCpOverPrandtl(cpOverPrandtl);
        
    _isAdimensional = false;
  }
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void NavierStokesPhysicalModel<DIM>::setReferenceTime()
{
  RealVector& refDataConv = getConvTerm()->getReferencePhysicalData();
  _refTime = getRefLength()/refDataConv[EulerTerm::V];
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void NavierStokesPhysicalModel<DIM>::configure ( Config::ConfigArgs& args )
{
  Framework::ConvectionDiffusionPM<EulerTerm, NSTerm>::configure(args);

  cf_assert(getDimension() > 0);
  cf_assert(getNbEquations() > 0);

  // allocate jacobians
  _jacobians = std::vector<RealMatrix>(DIM);
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i].resize(getNbEquations(), getNbEquations());
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace NavierStokes

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

