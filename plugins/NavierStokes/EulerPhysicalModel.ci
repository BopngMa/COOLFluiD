namespace COOLFluiD {

  namespace Physics {

    namespace NavierStokes {

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
EulerPhysicalModel<DIM>::EulerPhysicalModel(const std::string& name)
  : Framework::ConvectionPM<EulerTerm>(name)
{
}

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
EulerPhysicalModel<DIM>::~EulerPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
CFuint EulerPhysicalModel<DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
CFuint EulerPhysicalModel<DIM>::getNbEquations() const
{
  return DIM+2;
}

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
void EulerPhysicalModel<DIM>::setReferenceValues()
{
  Common::SafePtr<EulerTerm> convTerm = getConvTerm();

  const CFreal tempRef = convTerm->getTempRef();
  const CFreal pRef = convTerm->getPressRef();
  const CFreal MachInf = convTerm->getMachInf();

  if (!(MachInf > 0.)) {
    CFLog(VERBOSE, "EulerPhysicalModel::setReferenceValues() => Mach infinity NOT set\n");
  }
  
  // reference physical data to set
  RealVector& refData = convTerm->getReferencePhysicalData();

  // these are reference values => avVel == avSpeed =>
  // each component of the velocity is set equal to the
  // reference value => avVel.norm2() != avSpeed in this case
  if ((tempRef > 0.) && (pRef > 0.)) {
    const CFreal refSpeed = std::sqrt(convTerm->getRdim()*tempRef);
    refData[EulerTerm::V]   = refSpeed;
    refData[EulerTerm::VX]  = refSpeed;
    refData[EulerTerm::VY]  = refSpeed;
    refData[EulerTerm::VZ]  = refSpeed;
    refData[EulerTerm::RHO] = pRef/(refSpeed*refSpeed);
    refData[EulerTerm::P]   = pRef;
    refData[EulerTerm::H]   = refSpeed*refSpeed;
    refData[EulerTerm::E]   = refSpeed*refSpeed;
    refData[EulerTerm::A]   = refSpeed;
    refData[EulerTerm::T]   = tempRef;

    convTerm->setRRef(1.0);
    _isAdimensional = true;
  }
  else {
    CFLog(VERBOSE, "EulerPhysicalModel::setReferenceValues() => Equations will be solved dimensionally" << "\n");
    // if the pressure and temperature reference values
    // have not been specified set all the ref values to 1.
    refData = 1.0;

    convTerm->setRRef(convTerm->getRdim());
    convTerm->setTempRef(1.0);
    convTerm->setPressRef(1.0);
    _isAdimensional = false;
  }

  CFLog(VERBOSE, "tempRef = "   << tempRef << "\n");
  CFLog(VERBOSE, "pRef   = "    << pRef << "\n");
  CFLog(VERBOSE, "machInf   = " << MachInf << "\n");
  CFLog(VERBOSE, "rhoRef  = "  << refData[EulerTerm::RHO] << "\n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void EulerPhysicalModel<DIM>::setReferenceTime()
{
  RealVector& refDataConv = getConvTerm()->getReferencePhysicalData();
  _refTime = getRefLength()/refDataConv[EulerTerm::V];
}

//////////////////////////////////////////////////////////////////////////////

template<int DIM>
void EulerPhysicalModel<DIM>::configure ( Config::ConfigArgs& args )
{
  Framework::ConvectionPM<EulerTerm>::configure(args);

  cf_assert(getDimension() > 0);
  cf_assert(getNbEquations() > 0);

  // allocate jacobians
  _jacobians = std::vector<RealMatrix>(getDimension());
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i].resize(getNbEquations(), getNbEquations());
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace NavierStokes

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

