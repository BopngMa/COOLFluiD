namespace COOLFluiD {

  namespace Physics {

    namespace ArcJet {

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
ArcJetPhysicalModel<DIM>::ArcJetPhysicalModel(const std::string& name)
  : Framework::ConvectionDiffusionReactionPM<
  ArcJetInductionTerm<NavierStokes::EulerTerm>, 
  NavierStokes::NSTerm, 
  ArcJetReactionTerm<Framework::BaseTerm> >(name)
{
}	

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
ArcJetPhysicalModel<DIM>::~ArcJetPhysicalModel()
{
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint ArcJetPhysicalModel<DIM>::getDimension() const
{
  return DIM;
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
CFuint ArcJetPhysicalModel<DIM>::getNbEquations() const
{
  // set the number of induction equations
  return DIM+2+3+1; // fluid equations + B field + Phi (HDC method)
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
std::string ArcJetPhysicalModel<DIM>::getConvectiveName() const
{
  return "ArcJet" + Common::StringOps::to_str(DIM) + "D";
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void ArcJetPhysicalModel<DIM>::setReferenceValues()
{
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Physics::NavierStokes;

  SafePtr<ArcJetInductionTerm<EulerTerm> > convTerm = getConvTerm();
  SafePtr<NSTerm> diffTerm = getDiffTerm();
  SafePtr<ArcJetReactionTerm<BaseTerm> > srcTerm = getSrcTerm();

  // reference values for the convective part
  RealVector& refDataConv = convTerm->getReferencePhysicalData();
  // reference values for the diffusive part
  RealVector& refDataDiff = diffTerm->getReferencePhysicalData();
  // reference values for the reaction (source) part
  RealVector& refDataSrc = srcTerm->getReferencePhysicalData();

  // override the reference values for Euler data starting from
  CFout << "WATCH OUT: Equations will be solved dimensionally." << "\n";

  refDataConv = 1.0;
  refDataDiff = 1.0;
  refDataSrc  = 1.0;

  // the constant of real gas, density, thermodynamic pressure and Cv
  // set to infinite dimensional values
  convTerm->setRRef(convTerm->getRdim());

  // reference values set to 1.0
  convTerm->setTempRef(1.0);
  convTerm->setPressRef(1.0);

  // scaling coefficient for the momentum equations
  diffTerm->setCoeffTau(1.0);

  // scaling coefficient for the energy equation
  diffTerm->setCoeffQ(1.0);

  _isAdimensional = false;

  CFLog(NOTICE, "dynViscosityRef     = " << refDataDiff[NSTerm::MU]     << "\n");
  CFLog(NOTICE, "thermConductivity   = " << refDataDiff[NSTerm::LAMBDA] << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <int DIM>
void ArcJetPhysicalModel<DIM>::configure ( Config::ConfigArgs& args )
{
  Framework::ConvectionDiffusionReactionPM<
  ArcJetInductionTerm<NavierStokes::EulerTerm>, NavierStokes::NSTerm, 
  ArcJetReactionTerm<Framework::BaseTerm> >::configure(args);
  
  cf_assert(getDimension() > 0);
  cf_assert(getNbEquations() > 0);
  
  // allocate jacobians
  _jacobians = std::vector<RealMatrix>(DIM);
  for (CFuint i = 0; i < getDimension(); ++i) {
    _jacobians[i].resize(getNbEquations(), getNbEquations());
  }
}

//////////////////////////////////////////////////////////////////////////////

    } // namespace ArcJet 

  } // namespace Physics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
