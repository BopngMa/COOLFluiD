#include "NavierStokes/NSTurbTerm.hh"
#include "Framework/MeshData.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
void NoSlipWallIsothermalNSKOmPvt<CVARSET,DVARSET>::defineConfigOptions(Config::OptionList& options)
{
   options.template addConfigOption< CFreal >("yWallVelocity","Y-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("xWallVelocity","X-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("zWallVelocity","Z-component of a velocity vector of the wall.");
   options.template addConfigOption< CFreal >("KWall","Wall value for turbulent intensity");
   options.template addConfigOption< CFreal >("TWall","Wall value for the temperature");
   options.template addConfigOption< CFreal >("KGhostMin","Minumum turb. intensity in the ghost state");
}

//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
NoSlipWallIsothermalNSKOmPvt<CVARSET, DVARSET>::NoSlipWallIsothermalNSKOmPvt(const std::string& name) :
  FVMCC_BC(name),
  _varSetTurb(CFNULL),
  _diffVarTurb(CFNULL),
  _xWallVelocity(0.),
  _yWallVelocity(0.),
  _zWallVelocity(0.),
  m_kID(0),
  m_ghostK(0.)
{
  addConfigOptionsTo(this);

  setParameter("xWallVelocity",&_xWallVelocity);
  setParameter("yWallVelocity",&_yWallVelocity);
  setParameter("zWallVelocity",&_zWallVelocity);
  
  m_wallK = 0.;
  setParameter("KWall",&m_wallK);

  m_wallT = 0.;
  setParameter("TWall",&m_wallT);
  
  m_ghostKMin = 1e-14;
  setParameter("KGhostMin",&m_ghostKMin);
}

//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
NoSlipWallIsothermalNSKOmPvt<CVARSET, DVARSET>::~NoSlipWallIsothermalNSKOmPvt()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
void NoSlipWallIsothermalNSKOmPvt<CVARSET, DVARSET>::setup()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  CFAUTOTRACE;

  FVMCC_BC::setup();
  
  _varSetTurb = getMethodData().getUpdateVar().template d_castTo<CVARSET>();
  _diffVarTurb = getMethodData().getDiffusiveVar().template d_castTo<DVARSET>();
  
  _xWallVelocity /= _varSetTurb->getModel()->getVelRef();
  _yWallVelocity /= _varSetTurb->getModel()->getVelRef();
  _zWallVelocity /= _varSetTurb->getModel()->getVelRef();
  
  m_wallT /= _varSetTurb->getModel()->getTempRef();
  
  const CFuint dim = Framework::PhysicalModelStack::getActive()->getDim();
  m_tempNode.resize(dim);
  m_midNode.resize(dim);
  m_tempGhostNode.resize(dim);
  m_faceNormal.resize(dim);

  cf_assert(m_wallK >= 0.0);

  // the ID of the k variable
  m_kID = dim + 2;
}

//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
void NoSlipWallIsothermalNSKOmPvt<CVARSET, DVARSET>::setGhostState(Framework::GeometricEntity *const face)
{
  if (!this->getMethodData().getNodalStatesExtrapolator()->runAdiabatic()) {
    this->computeGhostPosition(face);
  }
  
  setGhostStateImpl(*face->getState(0), *face->getState(1));
}
      
//////////////////////////////////////////////////////////////////////////////

template <class CVARSET, class DVARSET>
void NoSlipWallIsothermalNSKOmPvt<CVARSET, DVARSET>::setGhostStateImpl
(const Framework::State& innerState, Framework::State& ghostState)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  using namespace COOLFluiD::MathTools;

  // here a fix is needed in order to have always m_ghostK > 0
  // dynamic relocation of the ghost state: the position of the
  // ghost state is locally changed, and the BC is imposed
  // using a weighted average of ghost state (in the new location)
  // and inner state
  const CFreal innerK = innerState[m_kID];
  this->repositionNode(innerK, m_ghostK, m_wallK, m_ghostKMin);
  
  const CFreal innerP = innerState[0];
  const CFuint TID = m_kID - 1;
  const CFuint omegaID = m_kID + 1;
  const CFreal innerT = innerState[TID];
  const CFreal innerDensity = innerP / (_varSetTurb->getModel()->getR() * innerT);
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();

  CFreal wallPressure = innerP;
  cf_assert(innerP > 0.);
  cf_assert(innerT > 0.);

  // reset the ghost node with the new position
  ghostState.getCoordinates() = m_tempGhostNode;
  
  // here we assume that we are in PUVTKOmega
  ghostState[0] = wallPressure;
  this->linearInterpolate(innerState[1], _xWallVelocity, ghostState[1]);
  this->linearInterpolate(innerState[2], _yWallVelocity, ghostState[2]);
  if (dim == DIM_3D) {
    this->linearInterpolate(innerState[3], _zWallVelocity, ghostState[3]);
  }
  
  // interpolate the wall temperature
  this->linearInterpolate(innerState[TID], m_wallT, ghostState[TID]);
  if (ghostState[TID] < 0.) {
    CFLog(INFO, "NoSlipWallIsothermalNSKOmPvt::setGhostStateImpl() => ghostT = " << ghostState[TID] << " < 0\n");
    ghostState[TID] = m_wallT;
  }
  ghostState[m_kID] = m_ghostK;
  
  const CFuint nbTurbVars = _varSetTurb->getModel()->getNbScalarVars(0);
  if (nbTurbVars == 2){
    // Compute distance to innerstate
    // avoid too small distances
    const CFreal y0 = std::max(m_drXiXw, 10.e-10);
    const CFreal pdim =  innerState[0] * _varSetTurb->getModel()->getPressRef();
    const CFreal Tdim =  innerState[TID] * _varSetTurb->getModel()->getTempRef();
    
    // this needs to be modified for LTE and has to use turbulent mu!
    const CFreal mu =_diffVarTurb->getModel().getDynViscosityDim(pdim, Tdim)/
      (_diffVarTurb->getModel().getReferencePhysicalData())[Physics::NavierStokes::NSTurbTerm::MU];
    
    const CFreal nu = mu / innerDensity;
    
    //this is not the best, but it avoids having to code another BC! because I
    //would have to dynamic cast to the KOmega varset to get the beta1
    const CFreal beta1 = 0.075;
    
    ///@todo here should this be adimensionalized (by the distance)???
    //Menter's definition
    const CFreal omegaWall = (10. * 6. * nu) / (beta1 * y0 * y0);
    
    //Wilcox's definition
    //CFreal omegaWall = (1. * 6. * nu) / (beta1 * y0 * y0);
    this->linearInterpolate(innerState[omegaID], omegaWall, ghostState[omegaID]);
    
    if (ghostState[omegaID] < 0.) {
      ghostState[omegaID] = innerState[omegaID];
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
      
    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD
