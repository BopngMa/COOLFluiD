#include "Common/PE.hh"
#include "Common/EventHandler.hh"
#include "MathTools/LeastSquaresSolver.hh"
#include "MathTools/MathFunctions.hh"

#include "Framework/DataProcessing.hh"
#include "Framework/SubSystemStatus.hh"
#include "Framework/MeshData.hh"
#include "Framework/LSSMatrix.hh"
#include "Framework/LSSVector.hh"

#include <boost/accumulators/accumulators.hpp>
#include <boost/accumulators/statistics/stats.hpp>
#include <boost/accumulators/statistics/p_square_quantile.hpp>
#include <boost/accumulators/statistics/mean.hpp>

#include <iostream>
//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFreal >("minPercentile","Percentile for minimum spring value");
  options.template addConfigOption< CFreal >("maxPercentile","Percentile for maximum spring value");
  options.template addConfigOption< CFreal >("meshAcceleration","How fast the mesh moves in mesh steps");
  options.template addConfigOption< std::string >("monitorVar","Monitor variable for mesh adaptation");
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
MeshFittingAlgorithm<MODEL>::MeshFittingAlgorithm(const std::string& name) :
  Framework::DataProcessingCom(name),
  socket_nodes("nodes"),
  socket_states("states"),
  socket_nstates("nstates"),
  socket_gstates("gstates"),
  socket_rhs("rhs"),
  m_lss(CFNULL),
  m_fvmccData(CFNULL)
{
  this->addConfigOptionsTo(this);
  
  m_minPercentile = 0.65;
  this->setParameter("minPercentile", &m_minPercentile);

  m_maxPercentile = 0.70;
  this->setParameter("maxPercentile", &m_maxPercentile);

  m_meshAcceleration = 1.0;  
  this->setParameter("meshAcceleration", &m_meshAcceleration);
  
  m_monitorVar = "rho";
  this->setParameter("monitorVar", &m_monitorVar);
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::configure ( Config::ConfigArgs& args )
{
  CFAUTOTRACE;

  Framework::DataProcessingCom::configure(args);
  
  cf_assert(m_minPercentile >= 0.);
  cf_assert(m_minPercentile < m_maxPercentile);
  cf_assert(m_maxPercentile <= 1.);
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > 
MeshFittingAlgorithm<MODEL>::needsSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSink> > result;
  
  result.push_back(&socket_nodes);
  result.push_back(&socket_states);
  result.push_back(&socket_nstates);
  result.push_back(&socket_gstates);
  result.push_back(&socket_rhs);
  
  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > 
MeshFittingAlgorithm<MODEL>::providesSockets()
{
  std::vector<Common::SafePtr<Framework::BaseDataSocketSource> > result;
  return result;
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::setup()
{
  CFAUTOTRACE;

  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::MathTools;
  
  // get the linear system associated to this object and set it up
  const std::string name = getMethodData().getNamespace();
  m_lss = getMethodData().template getCollaborator<LinearSystemSolver>(name);  
  
  CFLog(VERBOSE, "MeshFittingAlgorithm::setup() => LSS is " << m_lss->getName() << "\n");
  
  Common::SafePtr<Framework::SpaceMethod> spaceMethod = getMethodData().template getCollaborator<SpaceMethod>();
  Common::SafePtr<CellCenterFVM> fvmcc = spaceMethod.d_castTo<CellCenterFVM>();
  cf_assert(fvmcc.isNotNull());
  m_fvmccData = fvmcc->getData();
  
   /// setup geobuilder
  m_geoBuilder.setup();
  m_geoBuilder.getGeoBuilder()->setDataSockets(socket_states,
					       socket_gstates,
					       socket_nodes);
 
  getMethodData().getUpdateVarSet()->setup();
 
 
  /// create mapping between monitor variable and its model
  std::map<std::string, CFuint> variables;
  variables["rho"] = MODEL::PTERM::RHO;
  variables["p"] = MODEL::PTERM::P;
  
  std::map<std::string, CFuint>::iterator it = variables.find(m_monitorVar);
  cf_assert(it != variables.end());
  m_monitorVarID = it->second;
  
  createNodalConnectivity();
  determineLockedNodes();
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::createNodalConnectivity()
{
  m_edgeGraph.setNodeDataSocket(socket_nodes);
  m_edgeGraph.computeConnectivity(); 
}

//////////////////////////////////////////////////////////////////////////////
        
//TODO: right now, only nodes at the boundary are locked
//  Maybe also block specific TRS's ?
template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::determineLockedNodes()
{
 CFAUTOTRACE;
  
  CFLogDebugMin("MeshFittingAlgorithm::createConnectivity()" << "\n");
  
  Common::SafePtr<Framework::TopologicalRegionSet> cells = 
    Framework::MeshDataStack::getActive()->getTrs("InnerCells");  
  const CFuint nbCells = cells->getLocalNbGeoEnts();
  
  Framework::CellTrsGeoBuilder::GeoData& geoData = m_geoBuilder.getDataGE();
  geoData.trs = cells;
  
  for (CFuint iCell = 0; iCell < nbCells; ++iCell) {
    geoData.idx = iCell;
    Framework::GeometricEntity *const currCell = m_geoBuilder.buildGE();
    const std::vector<Framework::GeometricEntity*>& facesInCell = *currCell->getNeighborGeos();
    const CFuint nbFaces = facesInCell.size();
    
    for (CFuint iFace = 0; iFace < nbFaces; ++iFace) {
      std::vector<Framework::Node*>& faceNodes = *facesInCell[iFace]->getNodes();
      const CFuint nbFaceNodes = faceNodes.size();

      if (facesInCell[iFace]->getState(1)->isGhost()) {
        for(CFuint iNode=0; iNode < nbFaceNodes; ++iNode) {
          const CFuint nodeID = faceNodes[iNode]->getLocalID();
          m_boundaryNodes.insert(nodeID);
        }
      }
    }
    m_geoBuilder.releaseGE();
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::execute()
{
  CFAUTOTRACE;
  CFLog(VERBOSE, "MeshFittingAlgorithm::execute() => start \n");
  
  computeSpringTruncationData();
  solveLinearSystem();
  updateNodePositions();
  triggerRecomputeMeshData();
  
  // to be improved
  Framework::DataHandle<Framework::State*, Framework::GLOBAL> states = socket_states.getDataHandle();
  Framework::DataHandle<CFreal> rhs = socket_rhs.getDataHandle();
  const CFuint totalNbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  if (rhs.size()/totalNbEqs != states.size()) rhs.resize(states.size()*totalNbEqs); 
  
  CFLog(VERBOSE, "MeshFittingAlgorithm::execute() => end \n");
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::computeSpringTruncationData() 
{
  //This method computes the average, min and max spring constants through a user defined quantile
  //To compute the quantiles the BOOST statistical accumulators are used.
  //The sum of accumulators are not defined so a parallel reduce can't be used
  //Instead, all the spring constants need to be gathered on process 0 to be accumulated there
  //The P^2 algorithm was used to compute the quantiles
  //This results in very low memory requirements but lower accuracy. 
  //In particular, this algorithm will be dependent on the ordering of the springs and thus,
  //  on the number of processors and size of the send buffers

  CFAUTOTRACE;
  CFLogDebugMin( "MeshFittingAlgorithm::computeSprings()" << "\n");
  
  Framework::DataHandle < Framework::Node*, Framework::GLOBAL > nodes = socket_nodes.getDataHandle(); 

  using namespace boost::accumulators;
  typedef accumulator_set<CFreal, stats<tag::p_square_quantile> > accumulator_t;
  accumulator_t minQuantileAcc(quantile_probability = m_minPercentile);
  accumulator_t maxQuantileAcc(quantile_probability = m_maxPercentile);
  accumulator_set<double, stats<tag::mean> > meanAcc;

  const std::string nsp = this->getMethodData().getNamespace();
  const int nbProcesses = Common::PE::GetPE().GetProcessorCount(nsp);
  const int processRank = Common::PE::GetPE().GetRank(nsp);
  MPI_Comm communicator = Common::PE::GetPE().GetCommunicator(nsp); 
  
  //Limit the size of the receiving buffer on processor 0
  const CFuint sizeSendBuffer = std::ceil(1000./static_cast<CFreal>(nbProcesses)) + 1;
  const CFuint sizeRecvBuffer = sizeSendBuffer*nbProcesses;

  std::vector<CFreal> sendBuffer, recvBuffer; 
  sendBuffer.reserve(sizeSendBuffer);
  if(processRank == 0) recvBuffer.reserve(sizeRecvBuffer);
  
  SimpleEdgeGraph::iterator it = m_edgeGraph.begin();
  bool allSpringsCalculated = false;
  do{
    //compute store the spring constants in a temporary buffer
    for(CFuint iBuffer=0; iBuffer<sizeSendBuffer && it != m_edgeGraph.end(); ++it){
      const Framework::Node* node1 = (*it).firstNode;
      const Framework::Node* node2 = (*it).secondNode;
      if(!isNodeLocked(node1) && node1->isParUpdatable()){
        const CFreal springConstant = computeSpringConstant(node1, node2);
        sendBuffer.push_back(springConstant);
        ++iBuffer;
      }
    }
    
    //get global number of springs constants in all the buffers
    int sendBufferSize = sendBuffer.size();
    std::vector<int> recvBufferCounts(nbProcesses,0); 
    std::vector<int> recvBufferDisp(nbProcesses,0);
    MPI_Allgather(&sendBufferSize, 1, MPI_INT, &recvBufferCounts[0], 1, MPI_INT, communicator);
  
    //compute the buffer counts and displacements 
    int sumRecvBufferSize = 0;
    for(CFuint i=0; i< nbProcesses; ++i) {
      recvBufferDisp[i] = sumRecvBufferSize;
      sumRecvBufferSize += recvBufferCounts[i];
    }
    if(processRank == 0) recvBuffer.resize(sumRecvBufferSize); 

    //gather the temporary buffers in processor 0
    //to perform the statistical computations
    MPI_Gatherv(&sendBuffer[0], sendBufferSize, MPI_DOUBLE, &recvBuffer[0], 
        &recvBufferCounts[0], &recvBufferDisp[0], MPI_DOUBLE, 0, communicator); 
    sendBuffer.clear();  
    if(processRank == 0) {
      for(CFuint i=0; i<recvBuffer.size(); ++i){
        const CFreal ke = recvBuffer[i];
        minQuantileAcc(ke);
        maxQuantileAcc(ke);
        meanAcc(ke);
      }
    }

    allSpringsCalculated = (sumRecvBufferSize == 0);
  } while( !allSpringsCalculated );
  
  m_springTruncationData.minLimit = p_square_quantile(minQuantileAcc);
  m_springTruncationData.maxLimit = p_square_quantile(maxQuantileAcc);
  m_springTruncationData.mean     = mean(meanAcc);

  MPI_Bcast(&m_springTruncationData.minLimit, 1, MPI_DOUBLE, 0, communicator);
  MPI_Bcast(&m_springTruncationData.maxLimit, 1, MPI_DOUBLE, 0, communicator);
  MPI_Bcast(&m_springTruncationData.mean    , 1, MPI_DOUBLE, 0, communicator);

  std::cout<<m_springTruncationData.minLimit<<' '<<m_springTruncationData.maxLimit<<' '<< m_springTruncationData.mean<<std::endl;
}

//////////////////////////////////////////////////////////////////////////////
  
template <typename MODEL>
bool MeshFittingAlgorithm<MODEL>::isNodeLocked(const Framework::Node* node) 
{
  const bool isBoundary = m_boundaryNodes.find(node->getLocalID()) != m_boundaryNodes.end();
  return (isBoundary);
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
CFreal MeshFittingAlgorithm<MODEL>::computeSpringConstant(const Framework::Node* const firstNode, 
                                                          const Framework::Node* const secondNode) 
{
  CFAUTOTRACE;

  const CFuint nbDim = Framework::PhysicalModelStack::getActive()->getDim();
  const RealVector deltaNodalGradient = computeNodalGradient(secondNode) - computeNodalGradient(firstNode);
  
  RealVector deltaPosition(nbDim);
  CFreal num = 0.0, den = 0.0;
  for(CFuint i = 0; i < nbDim; ++i){
    deltaPosition[i] = (*firstNode)[XX+i] - (*secondNode)[XX+i];
    num += deltaPosition[i] * deltaNodalGradient[i];
    den += deltaPosition[i] * deltaPosition[i];
  }
  return std::abs(num)/den;
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
RealVector MeshFittingAlgorithm<MODEL>::computeNodalGradient(const Framework::Node* node)
{
  CFAUTOTRACE;

  Framework::DataHandle < Framework::Node*, Framework::GLOBAL > nodes = socket_nodes.getDataHandle();

  RealVector physicalData;
  Framework::PhysicalModelStack::getActive()->getImplementor()->
    getConvectiveTerm()->resizePhysicalData(physicalData);
 
  Common::SafePtr<Framework::ConvectiveVarSet> updateVarSet = getMethodData().getUpdateVarSet();
  cf_assert(updateVarSet.isNotNull());
  
  //the parameters to estimate are: {u, du/dx, du/dy, du/dz}
  const CFuint nbDim = Framework::PhysicalModelStack::getActive()->getDim();
  const CFuint nbParameters = nbDim+1;   
  RealVector nodalGradient(nbDim);

  CFuint nodeID = node-> getLocalID();
  const std::vector<Framework::State*> neighboringStatesOfCurrentNode = 
        m_fvmccData->getNodalStatesExtrapolator()->getNodalStateNeighbors(nodeID);
  const CFuint nbNeigboringStates = neighboringStatesOfCurrentNode.size();
  
  if( nbNeigboringStates < nbParameters) return nodalGradient;
 
  MathTools::LeastSquaresSolver lsSolver(nbParameters);  
  RealVector solution(nbParameters);
  RealVector weights(nbNeigboringStates);
  RealMatrix coefficients(nbNeigboringStates, nbParameters);
  RealVector rightHandSide(nbNeigboringStates);
 
  //fill the weights, rightHandSide and coefficient matrices
  for(CFuint iState = 0; iState < nbNeigboringStates; ++iState ){
    const Framework::Node stateCoordinates = neighboringStatesOfCurrentNode[iState]->getCoordinates();
    updateVarSet->computePhysicalData(*(neighboringStatesOfCurrentNode[iState]), physicalData);
 
    weights[iState] = 1. / MathTools::MathFunctions::getDistance( stateCoordinates, *nodes[nodeID]  );
    rightHandSide[iState] = physicalData[m_monitorVarID];
    
    coefficients(iState,0) = 1.;
    for(CFuint iDim= 0; iDim < nbDim; iDim++){
      const CFreal x0 = (*nodes[nodeID])[XX+iDim];
      const CFreal x1 = stateCoordinates[iDim];
      coefficients(iState,iDim+1) = x0 -x1;
    }
  }
  //solve the system in the Least Squares sense
  lsSolver.solve(coefficients, weights, rightHandSide, solution);  
 
  for(CFuint iDim=0; iDim<nbDim; ++iDim){
    nodalGradient[iDim] = solution[iDim+1];
  }

  return nodalGradient;
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::solveLinearSystem(){
  fillSpringsRightHandSide();
  fillSpringsMatrix();
  m_lss->solveSys();
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::fillSpringsRightHandSide() {
  Framework::DataHandle<Framework::Node*, Framework::GLOBAL> nodes = socket_nodes.getDataHandle();
  Framework::DataHandle<Framework::State*, Framework::GLOBAL> states = socket_states.getDataHandle();
  Framework::DataHandle<CFreal> rhs = socket_rhs.getDataHandle();
 
  const CFuint nbDims = Framework::PhysicalModelStack::getActive()->getDim();
  const CFuint totalNbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  const CFuint nbNodes = nodes.size();
  const CFuint rhsSize = std::max(nodes.size()*totalNbEqs,states.size()*totalNbEqs);
  
  if (rhs.size()!=rhsSize) rhs.resize(rhsSize);
  rhs = 0.;
  

  for(CFuint iNode=0; iNode<nbNodes; ++iNode){
    if(nodes[iNode]->isParUpdatable()){
      for(CFuint iDim=0; iDim<nbDims; ++iDim){
       	rhs[iNode*totalNbEqs + XX + iDim] = (*nodes[iNode])[XX+iDim];
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

// TODO: Use a Block accumulator
template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::fillSpringsMatrix(){
  CFAUTOTRACE;
  CFLog(VERBOSE, "MeshFittingAlgorithm::fillSystem()\n");

  Framework::DataHandle<Framework::Node*, Framework::GLOBAL> nodes = socket_nodes.getDataHandle();
  Framework::DataHandle<Framework::State*, Framework::GLOBAL> states = socket_states.getDataHandle();
    
  Common::SafePtr<Framework::LSSMatrix> jacobMatrix = m_lss->getMatrix();
  jacobMatrix->resetToZeroEntries();
  const Framework::LSSIdxMapping& idxMapping = m_lss->getLocalToGlobalMapping();

  const CFuint nbDims = Framework::PhysicalModelStack::getActive()->getDim();
  const CFuint totalNbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  cf_assert(nbDims < totalNbEqs);

  const CFuint nbNodes = nodes.size();
  for (CFuint iNode = 0; iNode < nbNodes; ++iNode) {
    if (!nodes[iNode]->isParUpdatable()){
      continue;
    }
    //Off-diagonal values
    CFreal sumOffDiagonalValues = 0.;
    if (!isNodeLocked(nodes[iNode])){
      const Framework::Node* firstNode = nodes[iNode];
      const std::vector<Framework::Node*>& neighboringNodes = 
        m_edgeGraph.getNeighborNodesOfNode(firstNode);
      
      std::vector<Framework::Node*>::const_iterator it;
      for(it=neighboringNodes.begin(); it != neighboringNodes.end(); ++it){
        const Framework::Node* secondNode = *it;
        const CFreal springConstant = computeSpringConstant(firstNode, secondNode);
        const CFreal normalizedSpringConstant =  truncateSpringConstant(springConstant);
        sumOffDiagonalValues += normalizedSpringConstant;
        
        CFuint rowGlobalID = idxMapping.getRowID( firstNode->getLocalID())*nbDims;
        CFuint colGlobalID = idxMapping.getColID(secondNode->getLocalID())*nbDims;
        for(CFuint iDim=0; iDim<nbDims; ++iDim){
          jacobMatrix->addValue(rowGlobalID+iDim, colGlobalID+iDim, -normalizedSpringConstant*m_meshAcceleration);
        }
      }
    }
    //Diagonal values 
    CFreal diagValue = 1.0 + m_meshAcceleration*sumOffDiagonalValues;
    CFuint globalID = idxMapping.getColID(nodes[iNode]->getLocalID())*nbDims;
    for(CFuint iDim=0; iDim<nbDims; ++iDim){
      jacobMatrix->addValue(globalID+iDim, globalID+iDim, diagValue);
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
CFreal MeshFittingAlgorithm<MODEL>::truncateSpringConstant(const CFreal springConstant)
{
  const CFreal maxLimit = m_springTruncationData.maxLimit;
  const CFreal minLimit = m_springTruncationData.minLimit;
  const CFreal mean     = m_springTruncationData.mean;

  const CFreal truncatedSpringConstant = std::max(std::min(maxLimit/mean, springConstant/mean), minLimit/mean );
  return truncatedSpringConstant;
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::updateNodePositions() {
  CFAUTOTRACE;
  CFLog(VERBOSE, "MeshFittingAlgorithm::updateNodePositions()\n");
  
  Framework::DataHandle < Framework::Node*, Framework::GLOBAL > nodes = socket_nodes.getDataHandle();
  Framework::DataHandle < CFreal > rhs = socket_rhs.getDataHandle();
  
  const CFuint totalNbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  const CFuint nbDims = Framework::PhysicalModelStack::getActive()->getDim();
  
  for (CFuint iNode = 0; iNode < nodes.size(); ++iNode) {
    if (nodes[iNode]->isParUpdatable()) {
      Framework::Node& currNode = *nodes[iNode];
      for(CFuint iDim = 0; iDim < nbDims; ++iDim) {
        currNode[XX+iDim] = rhs[iNode*totalNbEqs + XX + iDim];
      }
    }
  }
  //synchronize Nodes
  nodes.beginSync();
  nodes.endSync();
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::triggerRecomputeMeshData() {
  std::string msg;
  Common::SafePtr<Common::EventHandler> event_handler = Environment::CFEnv::getInstance().getEventHandler();
  const std::string ssname = Framework::SubSystemStatusStack::getCurrentName();   
  event_handler->call_signal (event_handler->key(ssname, "CF_ON_MESHADAPTER_AFTERMESHUPDATE"), msg );
}
      
//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
MeshFittingAlgorithm<MODEL>::~MeshFittingAlgorithm()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename MODEL>
void MeshFittingAlgorithm<MODEL>::unsetup()
{
  CFAUTOTRACE;
}

//////////////////////////////////////////////////////////////////////////////
 
    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
