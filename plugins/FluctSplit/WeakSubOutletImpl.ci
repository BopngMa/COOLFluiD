#ifndef COOLFluiD_Numerics_FluctSplit_WeakSubOutletImpl_ci
#define COOLFluiD_Numerics_FluctSplit_WeakSubOutletImpl_ci

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {



    namespace FluctSplit {

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakSubOutletImpl<WEAKBCTYPE>::defineConfigOptions(Config::OptionList& options)
{
   options.template addConfigOption< std::vector<std::string> >("Vars","Definition of the Variables.");
   options.template addConfigOption< std::vector<std::string> >("Def","Definition of the Functions.");
   options.template addConfigOption< std::string >("InputVar","Input variables.");
   options.template addConfigOption< CFreal >("P","Static pressure.");   
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
WeakSubOutletImpl<WEAKBCTYPE>::WeakSubOutletImpl(const std::string& name) :
  WEAKBCTYPE(name),
  m_vFunction(),
  m_dimState(CFNULL),
  m_gstateCons(CFNULL),
  m_stateCons(CFNULL),
  m_inputToUpdateVar(),
  m_updateToSolutionVar(),
  m_variables(),
  m_input(CFNULL),
  m_isUnsteady(false)
 {
  this->addConfigOptionsTo(this);

  m_functions = std::vector<std::string>();
  WeakSubOutletImpl<WEAKBCTYPE>::setParameter("Def",&m_functions);

  m_vars = std::vector<std::string>();
  WeakSubOutletImpl<WEAKBCTYPE>::setParameter("Vars",&m_vars);

  m_inputVarStr = "Null";
  WeakSubOutletImpl<WEAKBCTYPE>::setParameter("InputVar",&m_inputVarStr);

  _pStatic = -1.;
  WeakSubOutletImpl<WEAKBCTYPE>::setParameter("P",&_pStatic);
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
WeakSubOutletImpl<WEAKBCTYPE>::~WeakSubOutletImpl()
{
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakSubOutletImpl<WEAKBCTYPE>::setup()
{
  using namespace COOLFluiD::Framework;
  WEAKBCTYPE::setup();

  m_dimState = new State();
  m_input = new State();
  const CFuint maxNbStatesInCell = Framework::MeshDataStack::getActive()->Statistics().getMaxNbStatesInCell();

  if(SubSystemStatusStack::getActive()->getDT() > 0.) m_isUnsteady = true;

  m_variables.resize(PhysicalModelStack::getActive()->getDim());
  if(m_isUnsteady) m_variables.resize(PhysicalModelStack::getActive()->getDim()+1);

  m_inputToUpdateVar->setup(maxNbStatesInCell);

  m_updateToSolutionVar->setup(maxNbStatesInCell);

  m_gstateCons = new State();
  m_stateCons  = new State();
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakSubOutletImpl<WEAKBCTYPE>::unsetup()
{
  deletePtr(m_dimState);
  deletePtr(m_input);

  deletePtr(m_gstateCons);
  deletePtr(m_stateCons);

  WEAKBCTYPE::unsetup();
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakSubOutletImpl<WEAKBCTYPE>::computeFluxAndJacob(
                                   std::vector<Framework::State*>& states,
			                             RealVector& flux,
			                             RealMatrix& fluxJacob)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;

  // the first state is the ghost one
  State *const gstate = states[0];
  State *const state  = states[1];

  // set the values in the ghost state (whose position coincides
  // with the boundary states)
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const RealVector& temp = state->getCoordinates();
  for (CFuint i = 0; i < dim; ++i){
    m_variables[i] = temp[i];
  }
  if(m_isUnsteady) m_variables[temp.size()] = SubSystemStatusStack::getActive()->getCurrentTimeDim();

  // set the values in the ghost state (whose position coincides
  // with the boundary states)
  m_vFunction.evaluate(m_variables, *m_input);

  (*m_input)[0] = _pStatic;
  (*m_input)[1] = (*state)[1];
  (*m_input)[2] = (*state)[2];
  (*m_input)[3] = (*state)[3];

//	std::cout << "innerState: " << *state << std::endl;
//	std::cout << "m_input: " << *m_input << std::endl;

  // transform to update variables
  *m_dimState = *m_inputToUpdateVar->transform(m_input);

  // Adimensionalize the value
  SafePtr<ConvectiveVarSet> updateVarSet = WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getUpdateVar();
  updateVarSet->setAdimensionalValues(*m_dimState, *gstate);

  // here you are transforming 2 states but the transformer works
  // on MaxNbStatesInCell states
  vector<State*> *const linearStates = this->m_updateToLinearVecTrans->transform(&states);

  this->m_twoStates[0] = (*linearStates)[0];
  this->m_twoStates[1] = (*linearStates)[1];

  // linearize the states in the cell
  this->m_linearizer->linearize(this->m_twoStates);
  const CFreal kCoeff = 1./ PhysicalModelStack::getActive()->getDim();
  const CFuint nbEqs = PhysicalModelStack::getActive()->getNbEq();
  // adimensionalize the normal
  const CFreal faceArea = this->m_faceNormal.norm2();
  this->m_adimNormal = this->m_faceNormal/faceArea;

  // compute the Kplus in conservative variables
  SafePtr<ConvectiveVarSet> solutionVarSet = WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getSolutionVar();

  solutionVarSet->computeEigenValuesVectors(this->m_rightEv,
              this->m_leftEv,
              this->m_eValues,
              this->m_adimNormal);

  for (CFuint iEq = 0; iEq < nbEqs; ++iEq) {
    this->m_eValuesP[iEq] = max(0.,this->m_eValues[iEq]);
  }
  this->m_kPlus = this->m_rightEv*(this->m_eValuesP*this->m_leftEv);
  this->m_kPlus *= kCoeff*faceArea;

  // flux in conservative variables
  *m_gstateCons = *m_updateToSolutionVar->transform(states[0]);
  *m_stateCons  = *m_updateToSolutionVar->transform(states[1]);

  flux = this->m_kPlus*(*m_gstateCons - *m_stateCons);

  // jacobian of the flux in conservative variables
  // dFdU = - K_plus

  fluxJacob = this->m_kPlus;

  if ( WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().isResidualTransformationNeeded()) {
     // set the transformation from update to solution in update      
     SafePtr<VarSetMatrixTransformer> updateToSolInUpdate =           
      WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getUpdateToSolutionInUpdateMatTrans();         
                                                                      
     updateToSolInUpdate->setMatrix(*state);                           
     const RealMatrix& tMatrix = *updateToSolInUpdate->getMatrix();   

	 RealMatrix tempMatrix = fluxJacob;

     fluxJacob = tempMatrix*tMatrix;
  }                      
  
  fluxJacob *= -1.;
 }

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakSubOutletImpl<WEAKBCTYPE>::configure ( Config::ConfigArgs& args )
{
std::cout << "Configuring ...\n";
  using namespace COOLFluiD::Framework;
  WEAKBCTYPE::configure(args);

  m_updateVarStr = WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getUpdateVarStr();

  // create the transformer from input to update variables
  if (m_inputVarStr == "Null") {
    m_inputVarStr = m_updateVarStr;
  }

  std::string name = WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getNamespace();

  Common::SafePtr<Namespace> nsp = NamespaceSwitcher::getInstance
    (SubSystemStatusStack::getCurrentName()).getNamespace(name);
  Common::SafePtr<PhysicalModel> physModel = PhysicalModelStack::getInstance().getEntryByNamespace(nsp);

  std::string provider = VarSetTransformer::getProviderName(physModel->getConvectiveName(), m_inputVarStr, m_updateVarStr);

  m_inputToUpdateVar = Environment::Factory<VarSetTransformer>::getInstance().getProvider(provider)->create(physModel->getImplementor());

  cf_assert(m_inputToUpdateVar.isNotNull());

  // create the transformer from Update to Solution variables
  m_solutionVarStr = WeakSubOutletImpl<WEAKBCTYPE>::getMethodData().getSolutionVarStr();

  std::string provider2 = VarSetTransformer::getProviderName(physModel->getConvectiveName(), m_updateVarStr, m_solutionVarStr);

  m_updateToSolutionVar = Environment::Factory<VarSetTransformer>::getInstance().getProvider(provider2)->create(physModel->getImplementor());

  cf_assert(m_updateToSolutionVar.isNotNull());


  m_vFunction.setFunctions(m_functions);
  m_vFunction.setVariables(m_vars);
  try
  {
    m_vFunction.parse();
  }
  catch (Common::ParserException& e)
  {
    CFout << e.what() << "\n";
    throw; // retrow the exception to signal the error to the user
  }
std::cout << "...Configuring done!\n";
}

//////////////////////////////////////////////////////////////////////////////

} // namespace FluctSplit



} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

#endif // COOLFluiD_Numerics_FluctSplit_WeakSubOutletImpl_ci
