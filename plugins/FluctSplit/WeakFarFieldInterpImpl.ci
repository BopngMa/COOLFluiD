#ifndef COOLFluiD_Numerics_FluctSplit_WeakFarFieldInterpImpl_ci
#define COOLFluiD_Numerics_FluctSplit_WeakFarFieldInterpImpl_ci

//////////////////////////////////////////////////////////////////////////////

#include "Environment/SingleBehaviorFactory.hh"
#include "Environment/FileHandlerInput.hh"
#include "Environment/DirPaths.hh"
#include "Common/OldLookupTable.hh"
#include "Framework/PhysicalModel.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace FluctSplit {

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::defineConfigOptions(Config::OptionList& options)
{   
   options.template addConfigOption< std::vector<std::string> >("Vars", "Definition of the Variables.");
   options.template addConfigOption< std::string              >("InputVar", "Input variables.");
   options.template addConfigOption< std::string              >("InputFileName", "Input data file from which all variables will be extrapolated");
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
WeakFarFieldInterpImpl<WEAKBCTYPE>::WeakFarFieldInterpImpl(const std::string& name) :
  WEAKBCTYPE(name),  
  m_dimState(CFNULL),
  m_gstateCons(CFNULL),
  m_stateCons(CFNULL),
  m_inputToUpdateVar(),
  m_updateToSolutionVar(),
  m_variables(),
  m_input(CFNULL),
  m_isUnsteady(false),
  m_lookupState()
 {
  this->addConfigOptionsTo(this);

  // m_functions = std::vector<std::string>();
  // WeakFarFieldInterpImpl<WEAKBCTYPE>::setParameter("Def",&m_functions);

  m_vars = std::vector<std::string>();
  WeakFarFieldInterpImpl<WEAKBCTYPE>::setParameter("Vars",&m_vars);

  m_inputVarStr = "Null";
  WeakFarFieldInterpImpl<WEAKBCTYPE>::setParameter("InputVar",&m_inputVarStr);

  m_infile = "";
  WeakFarFieldInterpImpl<WEAKBCTYPE>::setParameter("InputFileName",&m_infile); 
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
WeakFarFieldInterpImpl<WEAKBCTYPE>::~WeakFarFieldInterpImpl()
{
  for (CFuint i = 0; i < m_lookupState.size(); ++i) {
    deletePtr(m_lookupState[i]);
  }
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::setup()
{
  using namespace COOLFluiD::Framework;
  
  WEAKBCTYPE::setup();

  m_dimState = new State();
  m_input    = new State();
  const CFuint maxNbStatesInCell = Framework::MeshDataStack::getActive()->Statistics().getMaxNbStatesInCell();

  if(SubSystemStatusStack::getActive()->getDT() > 0.) m_isUnsteady = true;

  m_variables.resize(PhysicalModelStack::getActive()->getDim());
  if(m_isUnsteady) m_variables.resize(PhysicalModelStack::getActive()->getDim()+1);

  m_inputToUpdateVar->setup(maxNbStatesInCell);

  m_updateToSolutionVar->setup(maxNbStatesInCell);

  m_gstateCons = new State();
  m_stateCons  = new State();
  
  const std::string nsp = this->getMethodData().getNamespace();
  
  if (m_infile != "") {
    if (Common::PE::GetPE().IsParallel()) {
      Common::PE::GetPE().setBarrier(nsp);
      for (CFuint p = 0; p < Common::PE::GetPE().GetProcessorCount(nsp); ++p) {
	if (p == Common::PE::GetPE().GetRank(nsp)) {
	  fillTable();
	}
	Common::PE::GetPE().setBarrier(nsp);
      }
    }
    else {
      fillTable();
    }
  }
  else {
    CFLog(WARN, "WARNING: SuperInletInterp::setup() => filename not specified!\n");
  }
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::unsetup()
{
  deletePtr(m_dimState);
  deletePtr(m_input);

  deletePtr(m_gstateCons);
  deletePtr(m_stateCons);

  WEAKBCTYPE::unsetup();
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::computeFluxAndJacob
(std::vector<Framework::State*>& states,
 RealVector& flux,
 RealMatrix& fluxJacob)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;

  // the first state is the ghost one
  State *const gstate = states[0];
  State *const state  = states[1];

  // set the values in the ghost state (whose position coincides
  // with the boundary states)
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  const RealVector& temp = state->getCoordinates();

  for (CFuint i = 0; i < dim; ++i){
    m_variables[i] = temp[i];
  }

  if(m_isUnsteady) m_variables[temp.size()] = SubSystemStatusStack::getActive()->getCurrentTimeDim();

  // set the values in the ghost state (whose position coincides
  // with the boundary states)
  // m_vFunction.evaluate(m_variables, *m_input);

  const CFuint nbEqs = PhysicalModelStack::getActive()->getNbEq();
  const CFreal yCoord = temp[YY];
  for (CFuint i = 0; i < nbEqs; ++i) {
    // interpolated state value in input variables
    (*m_input)[i] = m_lookupState[i]->get(yCoord);
  }


  // ---------------------------

  /// ---
  // std::cout << "1.\n(*gstate): " << (*gstate) << std::endl;
  // std::cout << "(*m_input): " << (*m_input) << std::endl;
  /// ---
   
  // First of all: is the ghost state subsonic or supersonic?
  //bool isSubsonic = false;
  //
  //const CFreal pGhost = (*gstate)[0];
  //const CFreal uGhost = (*gstate)[1];
  //const CFreal vGhost = (*gstate)[2];
  //const CFreal TGhost = (*gstate)[3];
  //
  //const CFreal gamma = 1.4;
  //const CFreal Rg    = 8314.4/28.965;
  //
  //const CFreal aGhost  = std::sqrt( gamma*Rg*TGhost );
  //const CFreal MaGhost = std::sqrt( uGhost*uGhost + vGhost*vGhost )/aGhost;  
  //
  //if ( MaGhost < 1. ){    
  //  isSubsonic = true;
  //
  //  const CFreal gamma_MINUS_one = gamma - 1.;
  //
//	// Information related to the boundary state
//    const CFreal factorMaGhost = 1. + 0.5*gamma_MINUS_one*MaGhost*MaGhost;
//
//	const CFreal pTot          = pGhost * std::pow(factorMaGhost, gamma/gamma_MINUS_one);
//    const CFreal TTot          = TGhost * factorMaGhost;    
//    const CFreal alpha         = std::atan2(vGhost, uGhost);
//    
//	// Let's compute the Ma number corresponding to the interior state
//    const CFreal pInterior = (*state)[0];
//    const CFreal uInterior = (*state)[1];
//    const CFreal vInterior = (*state)[2];
//    const CFreal TInterior = (*state)[3];
//
//    const CFreal aInterior        = std::sqrt( gamma*Rg*TInterior );
//    const CFreal MaInterior       = std::sqrt( uInterior*uInterior + vInterior*vInterior )/aInterior;
//    const CFreal factorMaInterior = 1. + 0.5*gamma_MINUS_one*MaInterior*MaInterior;
//
//	// What would be the static temperature and pressure ?
//    const CFreal TStar = TTot / factorMaInterior;
//    const CFreal pStar = pTot / std::pow(factorMaInterior, gamma/gamma_MINUS_one);
//
//    const CFreal aStar = std::sqrt( gamma * Rg * TStar );
//
//    const CFreal uStar = MaInterior * aStar * std::cos(alpha);
//    const CFreal vStar = MaInterior * aStar * std::sin(alpha);
//
//    const CFreal rhoStar  = pStar / (Rg*TStar);
//    const CFreal rhoUStar = rhoStar * uStar;
//    const CFreal rhoVStar = rhoStar * vStar;
//    const CFreal rhoEStar = pStar / gamma_MINUS_one + 0.5*rhoStar * ( uStar*uStar + vStar*vStar );
//
//    (*states[0])[0] = pStar ;
//    (*states[0])[1] = uStar ;
//    (*states[0])[2] = vStar ;
//    (*states[0])[3] = TStar ;
//
//    (*gstate)[0] = pStar ;
//  	(*gstate)[1] = uStar ;
//    (*gstate)[2] = vStar ;
//	(*gstate)[3] = TStar ;
//
//    (*m_input)[0] = pStar ;
//    (*m_input)[1] = uStar ;
//    (*m_input)[2] = vStar ;
//    (*m_input)[3] = TStar ;
//    
//    //std::cout << "--- Subsonic!\n";
//    //std::cout << "(*gstate): " << (*gstate) << std::endl;
//    //std::cout << "(*m_input): " << (*m_input) << std::endl;
//    //std::cout << "--- \n";
//
//    // std::cout << "(*m_gstateCons) " << (*m_gstateCons) << "\n";
//    // (*m_gstateCons)[0] =  rhoStar ;
//    // (*m_gstateCons)[1] =  rhoUStar ;
//    // (*m_gstateCons)[2] =  rhoVStar ;
//    // (*m_gstateCons)[3] =  rhoEStar ;
//    // // std::cout << "(*m_gstateCons) " << (*m_gstateCons) << "\n";
//  }
//  // --------------------------- */

  // transform to update variables
  *m_dimState = *m_inputToUpdateVar->transform(m_input);

  // Adimensionalize the value
  SafePtr<ConvectiveVarSet> updateVarSet = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getUpdateVar();
  updateVarSet->setAdimensionalValues(*m_dimState, *gstate);

  // here you are transforming 2 states but the transformer works
  // on MaxNbStatesInCell states
  vector<State*> *const linearStates = this->m_updateToLinearVecTrans->transform(&states);

  this->m_twoStates[0] = (*linearStates)[0];
  this->m_twoStates[1] = (*linearStates)[1];

  // linearize the states in the cell
  this->m_linearizer->linearize(this->m_twoStates);
  const CFreal kCoeff = 1./ PhysicalModelStack::getActive()->getDim();

  // adimensionalize the normal
  const CFreal faceArea = this->m_faceNormal.norm2();
  this->m_adimNormal    = this->m_faceNormal/faceArea;

  // compute the Kplus in conservative variables
  SafePtr<ConvectiveVarSet> solutionVarSet = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getSolutionVar();

  solutionVarSet->computeEigenValuesVectors(this->m_rightEv,
											this->m_leftEv,
											this->m_eValues,
											this->m_adimNormal);

  for (CFuint iEq = 0; iEq < nbEqs; ++iEq) {
    this->m_eValuesP[iEq] = max(0.,this->m_eValues[iEq]);
  }
  this->m_kPlus = this->m_rightEv*(this->m_eValuesP*this->m_leftEv);
  this->m_kPlus *= kCoeff*faceArea;

  // flux in conservative variables
  *m_gstateCons = *m_updateToSolutionVar->transform(states[0]);
  *m_stateCons  = *m_updateToSolutionVar->transform(states[1]);
  
  // if (isSubsonic){
    // std::cout << "Subsonic!\n";

  flux = this->m_kPlus*(*m_gstateCons - *m_stateCons);

    // jacobian of the flux in conservative variables
    // dFdU = - K_plus

  fluxJacob = this->m_kPlus;

  if ( WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().isResidualTransformationNeeded()) {
     // set the transformation from update to solution in update      
     SafePtr<VarSetMatrixTransformer> updateToSolInUpdate = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getUpdateToSolutionInUpdateMatTrans();
                                                                      
    updateToSolInUpdate->setMatrix(*state); //Std                           
	//updateToSolInUpdate->setMatrix(*gstate);// Alternative

     const RealMatrix& tMatrix = *updateToSolInUpdate->getMatrix();   

    RealMatrix tempMatrix = fluxJacob;

     fluxJacob = tempMatrix*tMatrix;
  }                      
  
    fluxJacob *= -1.;
  //}
  //else{
  //  // supersonic inlet
  //	// std::cout << "Supersonic!\n";
  //  RealMatrix m_k = this->m_rightEv*(this->m_eValues*this->m_leftEv);
  //  m_k *= kCoeff*faceArea;
  //
  //  // //flux = m_k * *m_stateCons; // up to 2013_11_05
  //  // //// jacobian of the flux in conservative variables
  //  // //// dFdU = - K_plus
  //
  //  // *m_stateCons = *m_gstateCons;
  //  // flux = 0.; // since *m_stateCons = *m_gstateCons
  //
  //  flux = this->m_kPlus*(*m_gstateCons - *m_stateCons);
  //
  //  fluxJacob = m_k;
  //
  //  if ( WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().isResidualTransformationNeeded()) {
  //     // set the transformation from update to solution in update      
  //     SafePtr<VarSetMatrixTransformer> updateToSolInUpdate =           
  //     WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getUpdateToSolutionInUpdateMatTrans();
  //                                                                    
  //     updateToSolInUpdate->setMatrix(*state);                           
  //     const RealMatrix& tMatrix = *updateToSolInUpdate->getMatrix();   
  //
  //    RealMatrix tempMatrix = fluxJacob;
  //
  //    fluxJacob = tempMatrix*tMatrix;
  //  }
  //
  //  fluxJacob *= -1.;
  //}
      
}

//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::configure ( Config::ConfigArgs& args )
{ 
  using namespace COOLFluiD::Framework;
  
  WEAKBCTYPE::configure(args);
  
  m_updateVarStr = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getUpdateVarStr();
  
  // create the transformer from input to update variables
  if (m_inputVarStr == "Null") {
    m_inputVarStr = m_updateVarStr;
  }
  
  std::string name = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getNamespace();
  Common::SafePtr<Namespace> nsp = NamespaceSwitcher::getInstance
    (SubSystemStatusStack::getCurrentName()).getNamespace(name);
  Common::SafePtr<PhysicalModel> physModel = PhysicalModelStack::getInstance().getEntryByNamespace(nsp);
  
  std::string provider = VarSetTransformer::getProviderName(physModel->getConvectiveName(), m_inputVarStr, m_updateVarStr);

  m_inputToUpdateVar = Environment::Factory<VarSetTransformer>::getInstance().getProvider(provider)->create(physModel->getImplementor());

  cf_assert(m_inputToUpdateVar.isNotNull());

  // create the transformer from Update to Solution variables
  m_solutionVarStr = WeakFarFieldInterpImpl<WEAKBCTYPE>::getMethodData().getSolutionVarStr();

  std::string provider2 = VarSetTransformer::getProviderName(physModel->getConvectiveName(), m_updateVarStr, m_solutionVarStr);

  m_updateToSolutionVar = Environment::Factory<VarSetTransformer>::getInstance().getProvider(provider2)->create(physModel->getImplementor());

  cf_assert(m_updateToSolutionVar.isNotNull());
  
  // m_vFunction.setFunctions(m_functions);
  // m_vFunction.setVariables(m_vars);
  // try
  // {
  //  m_vFunction.parse();
  // }
  // catch (Common::ParserException& e)
  // {
  //   CFout << e.what() << "\n";
  //   throw; // retrow the exception to signal the error to the user
  // }
}


//////////////////////////////////////////////////////////////////////////////

template < typename WEAKBCTYPE >
void WeakFarFieldInterpImpl<WEAKBCTYPE>::fillTable()
{
  boost::filesystem::path filepath = Environment::DirPaths::getInstance().getWorkingDir() / m_infile;

  Common::SelfRegistPtr<Environment::FileHandlerInput> fhandle = Environment::SingleBehaviorFactory<Environment::FileHandlerInput>::getInstance().create();
  std::ifstream& fin = fhandle->open(filepath);
  
  std::string variables;
  // read the first line with the variables names
  getline(fin, variables);
  CFuint nbPoints = 0;
  fin >> nbPoints; 
  CFLog(VERBOSE, "WeakFarFieldInterpImpl<WEAKBCTYPE>::fillTable() => nbPoints = " << nbPoints << "\n");
  
  // allocate the look up tables
  const CFuint nbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  m_lookupState.resize(nbEqs);
  for (CFuint i = 0; i < nbEqs; ++i) {
    m_lookupState[i] = new Common::LookUpTable<CFreal, CFreal>(nbPoints);
  } 
  
  // nbEqs + "y" AL: hardcoded here
  CFreal ycoord;
  CFreal tmpVar;
  for (CFuint ip = 0; ip < nbPoints; ++ip) {
    fin >> ycoord;
    for (CFuint i = 0; i < nbEqs; ++i) {
      fin >> tmpVar;
      m_lookupState[i]->insert(ycoord, tmpVar);
    }
  }
  
  // sort the data 
  for (CFuint i = 0; i < nbEqs; ++i) {
    m_lookupState[i]->sortKeys();
  }
  
  fin.close();
}

//////////////////////////////////////////////////////////////////////////////
    
} // namespace FluctSplit

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////

#endif // COOLFluiD_Numerics_FluctSplit_WeakFarField_ci
