#include "Common/PE.hh"
#include "Environment/SingleBehaviorFactory.hh"
#include "Environment/FileHandlerOutput.hh"
#include "Environment/DirPaths.hh"
#include "Framework/SubSystemStatus.hh"
#include "Common/BadValueException.hh"
#include "Framework/PathAppender.hh"
#include "FiniteVolume/CellCenterFVM.hh"
#include "FiniteVolume/DerivativeComputer.hh"
#include "NavierStokes/NavierStokesVarSet.hh"
#include "NavierStokes/EulerVarSet.hh"
#include "AeroCoef/AeroCoefFVM.hh"
#include "Framework/PhysicalChemicalLibrary.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

    namespace AeroCoef {

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void NavierStokesSkinFrictionHeatFluxCC3D<BASE>::defineConfigOptions(Config::OptionList& options)
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
NavierStokesSkinFrictionHeatFluxCC3D<BASE>::NavierStokesSkinFrictionHeatFluxCC3D(const std::string& name) :
  BASE(name),
  m_nbFaceNodes(0)
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
NavierStokesSkinFrictionHeatFluxCC3D<BASE>::~NavierStokesSkinFrictionHeatFluxCC3D()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void NavierStokesSkinFrictionHeatFluxCC3D<BASE>::setup()
{
  using namespace std;
  using namespace COOLFluiD::MathTools;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Common;
  
  BASE::setup();
  
  this->m_varNames.clear();
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  for (CFuint i = 0; i < dim; ++i) {
    const std::string xdim = "x" + Common::StringOps::to_str(i);
    this->m_varNames.push_back(xdim);
  }
  this->m_varNames.push_back("P");
  this->m_varNames.push_back("T");
  this->m_varNames.push_back("rho");
  this->m_varNames.push_back("Cp");
  this->m_varNames.push_back("heatF");
  this->m_varNames.push_back("Stanton");
  this->m_varNames.push_back("yplus");
  
  for (CFuint i = 0; i < dim; ++i) {
    const std::string friction = "skinF" + Common::StringOps::to_str(i);
    this->m_varNames.push_back(friction);
  }
  
  cf_always_assert(this->m_varNames.size() == 7 + 2*dim);
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void NavierStokesSkinFrictionHeatFluxCC3D<BASE>::computeWall()
{
  using namespace std;
  using namespace COOLFluiD::MathTools;
  using namespace COOLFluiD::Environment;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::Numerics::FiniteVolume;
  using namespace COOLFluiD::Common;
  
  CFAUTOTRACE;
  
  const bool isPerturb = false;
  const CFuint dummyVarID = 0;
  
  // set the state values (pointers) corresponding to the
  // vertices of the control volume
  this->_derivComputer->computeControlVolume(this->_states, this->m_currFace);
  
  // compute speed components and temperature in the given states
  // if you are updating in conservative variables your nodal values
  // MUST be already in primitive variables (there is inconsistency here !!!)
  const CFuint nbCVStates = this->_derivComputer->getNbVerticesInControlVolume(this->m_currFace);
  this->_diffVar->setGradientVars(this->_states, this->_values, nbCVStates);
  
  // compute control volume around the face and gradients
  this->_derivComputer->computeGradients(this->m_currFace, this->_values, this->_gradients);
  
  // compute the average values [p u v w T]
  this->_derivComputer->computeAverageValues(this->m_currFace, this->_states, *this->m_avState);
  
  // this is needed for LTE
  this->_diffVar->setComposition(*this->m_avState, isPerturb, dummyVarID);
  
  //Compute dynamic viscosity and density
  //We are computing at the wall where the wall distance is NULL!
  this->_diffVar->setWallDistance(0.);
  this->_muWall = this->_diffVar->getDynViscosity(*this->m_avState, this->_gradients);
  this->_rhoWall = this->_diffVar->getDensity(*this->m_avState);
  
  // Compute the friction at the wall
  this->computeTauWall();
  
  // Compute y+ value
  if(this->socket_wallDistance.isConnected())  {
    this->computeYplus();
  }
  
  // Collect the data to be written on the file later on
  updateWriteData();
}

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void NavierStokesSkinFrictionHeatFluxCC3D<BASE>::updateOutputFileWall()
{
  using namespace std;
  using namespace COOLFluiD::MathTools;
  using namespace COOLFluiD::Environment;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::Numerics::FiniteVolume;
  using namespace COOLFluiD::Common;
  
  CFAUTOTRACE;
  
  const std::string nsp = this->getMethodData().getNamespace();
  PE::GetPE().setBarrier(nsp);
  
  // all processors will write their own data one after the other 
  for (CFuint i = 0; i < PE::GetPE().GetProcessorCount(nsp); ++i) {
    if (i == PE::GetPE().GetRank(nsp)) {
      
      SafePtr<TopologicalRegionSet> currTrs = this->getCurrentTRS();
      if (currTrs->getLocalNbGeoEnts() > 0) {
	const CFuint dim = PhysicalModelStack::getActive()->getDim();
	boost::filesystem::path file = Environment::DirPaths::getInstance().getResultsDir() /
	  boost::filesystem::path(this->m_nameOutputFileWall + currTrs->getName());
	file = Framework::PathAppender::getInstance().appendAllInfo  
	  (file,this->m_appendIter,this->m_appendTime,false);   
     
	SelfRegistPtr<Environment::FileHandlerOutput> fhandle =
	  Environment::SingleBehaviorFactory<Environment::FileHandlerOutput>::getInstance().create();
	// append to the existing file 
	// carefull here 
	ofstream& fout = fhandle->open(file, ios::app);
	
	DataHandle < Framework::Node*, Framework::GLOBAL > nodes = this->socket_nodes.getDataHandle();
	const CFuint nbTrsFaces = currTrs->getLocalNbGeoEnts();
	SafePtr<vector<CFuint> > trsNodes = currTrs->getNodesInTrs();
	
	// this is to ensure consistency for hybrid meshes
	// take as shape the one corresponding to the maximum number of face nodes in the whole TRS 
	m_nbFaceNodes = 0;
	for (CFuint f = 0; f < nbTrsFaces; ++f) { 
	  m_nbFaceNodes = std::max(currTrs->getNbNodesInGeo(f),m_nbFaceNodes); 
	}
	
	const std::string shape = (m_nbFaceNodes == 3) ? "FETRIANGLE" : "FEQUADRILATERAL";
	
	// print zone header,
	// one zone per element type per cpu
	// therefore the title is dependent on those parameters
	fout << "ZONE "
	     << "  T=\"P" << PE::GetPE().GetRank("Default")<< " ZONE" << 0 << " " << shape <<"\""
	     << ", N=" << trsNodes->size()
	     << ", E=" << nbTrsFaces
	     << ", DATAPACKING=BLOCK"
	     << ", ZONETYPE=" << shape
	     << ", VARLOCATION=( [" << (dim + 1) << "-" << this->m_varNames.size() << "]=CELLCENTERED )";
	fout << "\n\n";
	
	const CFuint nbTrsNodes = trsNodes->size();
	const CFuint writeStride = 6; // this could be user defined
	
	for (CFuint iDim = 0; iDim < dim; ++iDim) {
	  // fout << "#### variable " << this->m_varNames[iDim] << "\n\n";
	  for (CFuint n = 0; n < nbTrsNodes; ++n) {
	    fout.setf(ios::scientific,ios::floatfield);
	    fout.precision(12);
	    fout << (*nodes[(*trsNodes)[n]])[iDim];
	    ((n+1)%writeStride == 0) ? fout << "\n" : fout << " ";
	  }
	}  
	
	for (CFuint iVar = dim; iVar < this->m_varNames.size(); ++iVar) {
	  //   fout << "#### variable " << this->m_varNames[iVar] << "\n\n";
	  const CFuint varID = iVar-dim;
	  cf_assert(varID <  this->m_valuesMat.nbRows());
	  
	  for (CFuint iFace = 0; iFace < nbTrsFaces; ++iFace) {
	    fout.setf(ios::scientific,ios::floatfield);
	    fout.precision(12);
	    
	    const CFuint index = this->m_mapTrsFaceToID.find(currTrs->getLocalGeoID(iFace));
	    cf_assert(index < this->m_valuesMat.nbCols());
	    
	    fout << this->m_valuesMat(varID, index);
	    ((iFace+1)%writeStride == 0) ? fout << "\n" : fout << " ";
	  }
	}
	
	CFMap<CFuint,CFuint> mapNodesID(nbTrsNodes);
	for (CFuint i = 0; i < nbTrsNodes; ++i) {
	  mapNodesID.insert((*trsNodes)[i],i+1);
	}
	mapNodesID.sortKeys();
	
	for (CFuint iFace = 0; iFace < nbTrsFaces; ++iFace) {
	  const CFuint nbNodesInGeo = currTrs->getNbNodesInGeo(iFace);
	  for (CFuint in = 0; in < nbNodesInGeo; ++in) {
	    fout << mapNodesID.find(currTrs->getNodeID(iFace,in)) << " ";
	  }
	  
	  if (nbNodesInGeo < m_nbFaceNodes) {
	    // here you can only have the case 3 instead of 4 nodes
	    // output twice the last node ID
	    fout << mapNodesID.find(currTrs->getNodeID(iFace,nbNodesInGeo-1)) << " "; 
	  }
	  
	  fout << "\n";
	  fout.flush();
	}
	
	//closing the file
	fhandle->close();
      }
    }
    
    PE::GetPE().setBarrier(nsp);
  }
}  

//////////////////////////////////////////////////////////////////////////////

template <class BASE>
void NavierStokesSkinFrictionHeatFluxCC3D<BASE>::updateWriteData()
{
  using namespace std;
  using namespace COOLFluiD::MathTools;
  using namespace COOLFluiD::Environment;
  using namespace COOLFluiD::Framework;
  using namespace COOLFluiD::Physics::NavierStokes;
  using namespace COOLFluiD::Numerics::FiniteVolume;
  using namespace COOLFluiD::Common;
  
  const vector<Node*>& faceNodes = *this->m_currFace->getNodes();
  const CFuint nbFaceNodes = faceNodes.size();

  Common::SafePtr<PhysicalChemicalLibrary> library =
    PhysicalModelStack::getActive()->getImplementor()->
    getPhysicalPropertyLibrary<PhysicalChemicalLibrary>();

  // compute the cell center of the face
  this->m_coord = 0.0;
  for (CFuint iNode = 0; iNode < nbFaceNodes; ++iNode) {
    this->m_coord += *faceNodes[iNode];
  }
  this->m_coord /= nbFaceNodes;
  
  const CFreal heatFlux = this->_diffVar->getHeatFlux
    (*this->m_avState, this->_gradients, this->m_unitNormal);
  
  //  const CFreal refLength = PhysicalModelStack::getActive()->getImplementor()->getRefLength();
  //   const CFreal heatFluxRef = this->_updateVar->getModel()->getTempRef()/refLength;
  // unused // const CFreal gamma = this->_updateVar->getModel()->getGamma();
  const CFreal SpecificHeatCp = this->m_updateVarSet->getModel()->getCp();
  
  CFreal pDim = 0.;
  CFreal rhoDim = 0.;
  CFreal TDim = 0.;
  this->computeDimensionalPressDensTemp(pDim, rhoDim, TDim);
  
  CFreal rhoInf = this->m_pInf / (this->m_updateVarSet->getModel()->getRdim() * this->m_TInf);
  CFreal stantonNumber = heatFlux / ((SpecificHeatCp*(this->m_TInf - TDim) +
				      0.5* this->m_uInf*this->m_uInf )*rhoInf*this->m_uInf);
  
  //cout<<"SpecificHeatCp"<<"\t"<<SpecificHeatCp<<"\t"<<endl;
  //cout<<"rhoInf\t"<<rhoInf<<"this->_uInf\t"<<this->_uInf<<endl;
  //CFreal heatFluxDim = heatFlux * heatFluxRef;
  
  CFreal Cp = (pDim - this->m_pInf);
  Cp /= (0.5*rhoInf*this->m_uInf*this->m_uInf);
  
  const CFuint index = this->m_mapTrsFaceToID.find(this->m_currFace->getID());
  
  this->updateValuesMatAndResidual(0, index, pDim);
  this->updateValuesMatAndResidual(1, index, TDim);
  this->updateValuesMatAndResidual(2, index, rhoDim);
  this->updateValuesMatAndResidual(3, index, Cp);
  this->updateValuesMatAndResidual(4, index, -heatFlux);
  this->updateValuesMatAndResidual(5, index, -stantonNumber);
  this->updateValuesMatAndResidual(6, index, this->_yPlus); 
  
  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  for (CFuint iDim = 0; iDim < dim; ++iDim) {
    this->updateValuesMatAndResidual(7 + iDim, index, this->m_frictionForces[iDim]);
  }
}

//////////////////////////////////////////////////////////////////////////////

} // namespace AeroCoef

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
