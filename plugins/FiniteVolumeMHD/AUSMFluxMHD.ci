#include "Framework/EquationSetData.hh"
#include "Framework/BaseTerm.hh"
#include "FiniteVolume/FVMCC_PolyRec.hh"
#include "MHD/MHDProjectionTerm.hh"
#include "AUSMPWFluxMHD.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Numerics {

    namespace FiniteVolume {

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
AUSMFluxMHD<UPDATEVAR>::AUSMFluxMHD(const std::string& name) :
  FVMCC_FluxSplitter(name),
  m_updateVarSet(CFNULL),
  m_lData(CFNULL),
  m_rData(CFNULL),
  m_unL(0.0),
  m_unR(0.0),
  m_a12(0.0),
  m_mL(0.0),
  m_mR(0.0),
  m_mflux12(0.0),
  m_p12(0.0),
  m_tempUnitNormal(),
  m_pdata(),
  _rightEv(),
  _leftEv(),
  _eValues(),
  _jRight(),
  _jLeft(),
  _jacob(),
  _jacobLeftTransf(),
  _jacobRightTransf(),
  _jacobDummy(),
  _statesLR(2)
{
  addConfigOptionsTo(this);
  m_choiceA12 = 4;
  this->setParameter("choiceA12",&m_choiceA12);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
AUSMFluxMHD<UPDATEVAR>::~AUSMFluxMHD()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::defineConfigOptions(Config::OptionList& options)
{
  options.template addConfigOption< CFuint >
    ("choiceA12","Way of computing the interface sound speed a12.");
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::setup()
{
  using namespace COOLFluiD::Framework;
 
  FVMCC_FluxSplitter::setup();
  
  m_tempUnitNormal.resize(PhysicalModelStack::getActive()->getDim());

  PhysicalModelStack::getActive()->getImplementor()->
    getConvectiveTerm()->resizePhysicalData(m_pdata);
    
  m_updateVarSet = this->getMethodData().getUpdateVar().template d_castTo<UPDATEVAR>();
  cf_assert(m_updateVarSet.isNotNull());
  
//  const CFuint dim = PhysicalModelStack::getActive()->getDim();
  
  // AUSM scheme related data
  const CFuint nbEqs = Framework::PhysicalModelStack::getActive()->getNbEq();
  _rightEv.resize(nbEqs, nbEqs);
  _leftEv.resize(nbEqs, nbEqs);
  _eValues.resize(nbEqs);
  _jRight.resize(nbEqs,nbEqs);
  _jLeft.resize(nbEqs, nbEqs);
  _jacob.resize(nbEqs, nbEqs);
  _jacobLeftTransf.resize(nbEqs, nbEqs);
  _jacobRightTransf.resize(nbEqs, nbEqs);
  _jacobDummy.resize(nbEqs, nbEqs);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::compute(RealVector& result)
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
    const EquationSubSysDescriptor& eqSSD = PhysicalModelStack::getActive()->
      getEquationSubSysDescriptor();
    const CFuint nbEqs = eqSSD.getNbEqsSS();
    const CFuint totalNbEqs = PhysicalModelStack::getActive()->getNbEq();
    const CFuint iEqSS = eqSSD.getEqSS();
   
  vector<RealVector>& pdata = getMethodData().getPolyReconstructor()->getExtrapolatedPhysicaData();
  m_lData = &pdata[LEFT];
  m_rData = &pdata[RIGHT];
//  const CFuint dim = PhysicalModelStack::getActive()->getDim();

  if (iEqSS == 0 || nbEqs == totalNbEqs) {
    vector<RealVector>& pdata = getMethodData().getPolyReconstructor()->getExtrapolatedPhysicaData();
    m_lData = &pdata[LEFT];
    m_rData = &pdata[RIGHT];

    // The flow at the freestream is assumed to be one-dimensional
    // calculation of the normal component of velocity for the left and right states
    const CFuint dim = PhysicalModelStack::getActive()->getDim();
    const RealVector& normal = getMethodData().getUnitNormal();

    m_unL = 0.0;
    m_unR = 0.0;
    for (CFuint idim = 0; idim < dim; ++idim)
{
      const CFuint currXX = UPDATEVAR::PTERM::VX + idim;
      m_unL += (*m_lData)[currXX]*normal[idim];
      m_unR += (*m_rData)[currXX]*normal[idim];
}
    // Compute speed of the mesh at current quadrature point
    // the normal velocities m_unL and m_unR will be modified accordingly

    this->computeMeshSpeed();
    computeInterfaceMach();
    computeReferences();
    computeMassFluxImpl(result); // result


    if (!this->getMethodData().isPerturb()) { computeUpdateCoeff(); }
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeUpdateCoeff()
{
  using namespace std;
  using namespace COOLFluiD::Framework;
  
  CellCenterFVMData& data = this->getMethodData(); 
  GeometricEntity& face = *data.getCurrentFace();
  const CFreal faceArea = socket_faceAreas.getDataHandle()[face.getID()]/
    data.getPolyReconstructor()->nbQPoints();
  const EquationSubSysDescriptor& eqSSD = PhysicalModelStack::getActive()->
    getEquationSubSysDescriptor();
  
  DataHandle<CFreal> updateCoeff = socket_updateCoeff.getDataHandle();
  const CFuint nbEqSS = eqSSD.getTotalNbEqSS();
  //   CFLog(INFO, "AUSMFluxMHD::computeUpdateCoeff() => nbEqSS = " << nbEqSS << "\n");
  for (CFuint i = 0; i < nbEqSS; ++i) {
    // set the ID of the current equation subsystem
    //m_updateVarSet->setEqSS(i);
    
    // left contribution to update coefficient
    const CFuint leftID = face.getState(0)->getLocalID();
    CFreal maxEV = m_updateVarSet->getMaxEigenValue(*m_lData, data.getUnitNormal());
    CFLog(DEBUG_MED, "AUSMFluxMHD::computeUpdateCoeff() => Max left eigenvalue in EqSS " << i << " is " << maxEV << "\n");
    updateCoeff[leftID*nbEqSS + i] += max(maxEV, 0.)*faceArea;
    
    if (!face.getState(1)->isGhost()) {
      // right contribution to update coefficient
      const CFuint rightID = face.getState(1)->getLocalID();
      m_tempUnitNormal = -1.0*data.getUnitNormal();
      maxEV = m_updateVarSet->getMaxEigenValue(*m_rData,m_tempUnitNormal);
      CFLog(DEBUG_MED, "AUSMFluxMHD::computeUpdateCoeff() => Max right eigenvalue in EqSS " << i << " is " << maxEV << "\n");
      updateCoeff[rightID*nbEqSS + i] += max(maxEV, 0.)*faceArea;    
    }
  }
}

//////////////////////////////////////////////////////////////////////////////

// template <class UPDATEVAR>
// void AUSMFluxMHD<UPDATEVAR>::computeMassFluxImpl(RealVector& result)
// {
//    using namespace std;
//    using namespace COOLFluiD::Framework;

//    const CFuint dim = PhysicalModelStack::getActive()->getDim();
//    const RealVector& normal = this->getMethodData().getUnitNormal();
//    const RealVector *const upwindData = (m_mflux12 > 0.0) ? m_lData : m_rData;

//    // calculation of the dimensional numerical fluxes at the interface
//    if (nbEulerEqs == dim+1) {
//        for (CFuint idim = 0; idim < dim; ++idim) {
//            result[eulerVarIDs[idim]] = m_mflux12*(*upwindData)[UPDATEVAR::PTERM::VX+idim] + m_p12*normal[idim];
//        }
//        result[eulerVarIDs[dim]] = m_mflux12*(*upwindData)[UPDATEVAR::PTERM::H];
//    }
//    else {
//        result[0] = m_mflux12;
//        for (CFuint idim = 0; idim < dim; ++idim) {
//            result[idim+1] = m_mflux12*(*upwindData)[UPDATEVAR::PTERM::VX+idim] + m_p12*normal[idim];
//        }
//        result[dim+1] = m_mflux12*(*upwindData)[UPDATEVAR::PTERM::H];
//    }
// }


//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeInterfaceSoundSpeed()
{
  // the user must choose one of the following 3 ways of calculation of the
  // interface speed of sound, a12
  this->m_a12 = 0.0;
  switch(this->m_choiceA12) {
  case 1:
    computeSoundSpeed1();
    break;
  case 2:
    computeSoundSpeed2();
    break;
  case 3:
    computeSoundSpeed3();
    break;
  case 4:
    computeSoundSpeed4();
    break;
  default:
    computeSoundSpeed1();
    break;
  }
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeSoundSpeed1()
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  // 1st Way of calculation of the interface speed of sound, a12,
  // suggested by Liou in his AIAA 2003-4116 paper
  const CFreal gammaL       = (*this->m_lData)[UPDATEVAR::PTERM::GAMMA];
  const CFreal gammaMinus1L = gammaL - 1.0;
  const CFreal gammaR       = (*this->m_rData)[UPDATEVAR::PTERM::GAMMA];
  const CFreal gammaMinus1R = gammaR - 1.0;

  // Enthalpy
  const CFreal pL   = (*this->m_lData)[UPDATEVAR::PTERM::P];
  const CFreal pR   = (*this->m_rData)[UPDATEVAR::PTERM::P];
  const CFreal rhoL = (*this->m_lData)[UPDATEVAR::PTERM::RHO];
  const CFreal rhoR = (*this->m_rData)[UPDATEVAR::PTERM::RHO];
  const CFreal VL   = (*this->m_lData)[UPDATEVAR::PTERM::V];
  const CFreal VR   = (*this->m_rData)[UPDATEVAR::PTERM::V];

  const CFreal hL   = pL/(rhoL*(gammaMinus1L)) + pL/rhoL + 0.5*std::pow(VL, 2.0);
  const CFreal hR   = pR/(rhoR*(gammaMinus1R)) + pR/rhoR + 0.5*std::pow(VR, 2.0);

  // Critical sound speed
  const CFreal aCritL = sqrt( (2.0*gammaMinus1L/(gammaL + 1.0))*hL);
  const CFreal aCritR = sqrt( (2.0*gammaMinus1R/(gammaR + 1.0))*hR);

  const CFreal acL = (aCritL*aCritL)/max(aCritL, this->m_unL);
  const CFreal acR = (aCritR*aCritR)/max(aCritR, -this->m_unR);
  this->m_a12      = std::min(acL, acR);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeSoundSpeed2()
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  // 2nd Way of calculation of the interface speed of sound, a12,
  // by simply taking the arithmetic average of the speeds of sounds
  // at the left and right states
  const CFreal aL = (*this->m_lData)[UPDATEVAR::PTERM::A];
  const CFreal aR = (*this->m_rData)[UPDATEVAR::PTERM::A];
  this->m_a12     = 0.5 * (aL+aR);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeSoundSpeed3()
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  // 3rd Way of calculation of the interface speed of sound, a12,
  // by simply taking the geometric mean of the speeds of sounds
  // at the left and right states
  const CFreal aL = (*this->m_lData)[UPDATEVAR::PTERM::A];
  const CFreal aR = (*this->m_rData)[UPDATEVAR::PTERM::A];
  this->m_a12     = sqrt(aL*aR);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeSoundSpeed4()
{
  using namespace std;
  using namespace COOLFluiD::Framework;

  const CFreal aL   = (*this->m_lData)[UPDATEVAR::PTERM::A];
  const CFreal aR   = (*this->m_rData)[UPDATEVAR::PTERM::A];
  const CFreal BL   = (*this->m_lData)[UPDATEVAR::PTERM::B];
  const CFreal BR   = (*this->m_rData)[UPDATEVAR::PTERM::B];
  const CFreal rhoL = (*this->m_lData)[UPDATEVAR::PTERM::RHO];
  const CFreal rhoR = (*this->m_rData)[UPDATEVAR::PTERM::RHO];
  const CFreal KL   = aL*aL + (BL*BL)/rhoL;
  const CFreal KR   = aR*aR + (BR*BR)/rhoR;

  // Critical sound speed
  const CFreal acL = sqrt( (1./2.)*(KL + sqrt(KL*KL - 4.*(aL*aL*this->m_BnL*this->m_BnL)/rhoL) ) );
  const CFreal acR = sqrt( (1./2.)*(KR + sqrt(KR*KR - 4.*(aR*aR*this->m_BnR*this->m_BnR)/rhoR) ) );
  this->m_a12 = std::min(acL, acR);
}

//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeLeftJacobian()
{  
  FVMCC_FluxSplitter::computeLeftJacobian();	
}
      
//////////////////////////////////////////////////////////////////////////////

template <class UPDATEVAR>
void AUSMFluxMHD<UPDATEVAR>::computeRightJacobian()
{ 
  FVMCC_FluxSplitter::computeRightJacobian();
}
      
//////////////////////////////////////////////////////////////////////////////

    } // namespace FiniteVolume

  } // namespace Numerics

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
