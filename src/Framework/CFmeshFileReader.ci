// Copyright (C) 2012 von Karman Institute for Fluid Dynamics, Belgium
//
// This software is distributed under the terms of the
// GNU Lesser General Public License version 3 (LGPLv3).
// See doc/lgpl.txt and doc/gpl.txt for the license text.

#include "Common/ProcessInfo.hh"
#include "Common/OSystem.hh"
#include "Common/NoSuchValueException.hh"

#include "Framework/CFGeoEnt.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Framework {

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
CFmeshFileReader<DATA>::CFmeshFileReader() :
  FileReader(),
  m_readData(),
  m_mapString2Reader(),
  m_useInitValues(),
  m_initValues(),
  m_initValuesIDs()
{
  setMapString2Readers();
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
CFmeshFileReader<DATA>::~CFmeshFileReader()
{
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::setMapString2Readers()
{
  using namespace std;
  
  CFLogDebugMin( "CFmeshFileReader<DATA>::setMapString2Readers() start\n");
  
  m_mapString2Reader["!COOLFLUID_VERSION"]     = &CFmeshFileReader<DATA>::readCFVersion;
  m_mapString2Reader["!COOLFLUID_SVNVERSION"]  = &CFmeshFileReader<DATA>::readSvnVersion;
  m_mapString2Reader["!CFMESH_FORMAT_VERSION"] = &CFmeshFileReader<DATA>::readCFmeshVersion;
  m_mapString2Reader["!NB_DIM"]             = &CFmeshFileReader<DATA>::readDimension;
  m_mapString2Reader["!NB_EQ"]              = &CFmeshFileReader<DATA>::readNbEquations;
  m_mapString2Reader["!NB_NODES"]           = &CFmeshFileReader<DATA>::readNbNodes;
  m_mapString2Reader["!NB_STATES"]          = &CFmeshFileReader<DATA>::readNbStates;
  m_mapString2Reader["!NB_EXTRA_NVARS"]     = &CFmeshFileReader<DATA>::readNbExtraNodalVars;
  m_mapString2Reader["!NB_EXTRA_SVARS"]     = &CFmeshFileReader<DATA>::readNbExtraStateVars;
  m_mapString2Reader["!EXTRA_NVARS_NAMES"]  = &CFmeshFileReader<DATA>::readExtraNodalVarNames;
  m_mapString2Reader["!EXTRA_SVARS_NAMES"]  = &CFmeshFileReader<DATA>::readExtraStateVarNames;
  m_mapString2Reader["!NB_ELEM"]            = &CFmeshFileReader<DATA>::readNbElements;
  m_mapString2Reader["!NB_ELEM_TYPES"]      = &CFmeshFileReader<DATA>::readNbElementTypes;
  m_mapString2Reader["!GEOM_POLYTYPE"]      = &CFmeshFileReader<DATA>::readGeometricPolyType;
  m_mapString2Reader["!SOL_POLYTYPE"]       = &CFmeshFileReader<DATA>::readSolutionPolyType;
  m_mapString2Reader["!GEOM_POLYORDER"]     = &CFmeshFileReader<DATA>::readGeometricPolyOrder;
  m_mapString2Reader["!SOL_POLYORDER"]      = &CFmeshFileReader<DATA>::readSolutionPolyOrder;
  m_mapString2Reader["!LIST_NODE"]          = &CFmeshFileReader<DATA>::readNodeList;
  m_mapString2Reader["!LIST_STATE"]         = &CFmeshFileReader<DATA>::readStateList;
  m_mapString2Reader["!NB_TRSs"]            = &CFmeshFileReader<DATA>::readNbTRSs;
  m_mapString2Reader["!TRS_NAME"]           = &CFmeshFileReader<DATA>::readTRSName;
  m_mapString2Reader["!NB_TRs"]             = &CFmeshFileReader<DATA>::readNbTRs;
  m_mapString2Reader["!NB_GEOM_ENTS"]       = &CFmeshFileReader<DATA>::readNbGeomEnts;
  m_mapString2Reader["!GEOM_TYPE"]          = &CFmeshFileReader<DATA>::readGeomType;
  m_mapString2Reader["!LIST_GEOM_ENT"]      = &CFmeshFileReader<DATA>::readGeomEntList;
  m_mapString2Reader["!ELEM_TYPES"]         = &CFmeshFileReader<DATA>::readElementTypes;
  m_mapString2Reader["!NB_ELEM_PER_TYPE"]   = &CFmeshFileReader<DATA>::readNbElementsPerType;
  m_mapString2Reader["!NB_NODES_PER_TYPE"]  = &CFmeshFileReader<DATA>::readNbNodesPerType;
  m_mapString2Reader["!NB_STATES_PER_TYPE"] = &CFmeshFileReader<DATA>::readNbStatesPerType;
  m_mapString2Reader["!LIST_ELEM"]          = &CFmeshFileReader<DATA>::readElementList;
  
  CFLogDebugMin( "CFmeshFileReader<DATA>::setMapString2Readers() end\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readCFVersion(std::ifstream& fin)
{
  CFLogDebugMin( "CFmeshFileReader<DATA>::readCFVersion() start\n");

  std::string version;
  fin >> version;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readCFVersion() end\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readSvnVersion(std::ifstream& fin)
{
  CFLogDebugMin( "CFmeshFileReader<DATA>::readSvnVersion() start\n");

  std::string version;
  fin >> version;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readSvnVersion() end\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readCFmeshVersion(std::ifstream& fin)
{
  CFLogDebugMin( "CFmeshFileReader<DATA>::readCFmeshVersion() start\n");

  std::string version;
  fin >> version;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readCFmeshVersion() end\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readDimension(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readDimension() called" << "\n");

  CFint dimension = 0;
  fin >> dimension;

  getReadData().setDimension(static_cast<CFuint>(dimension));
  if(getReadData().getDimension() != DIM_2D &&
     getReadData().getDimension() != DIM_3D) {
    throw BadFormatException (FromHere(),"Wrong dimension in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readDimension() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbEquations(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbEquations() called" << "\n");

  CFint nbEquations = 0;
  fin >> nbEquations;

  cf_assert((m_useInitValues.size() == m_initValues.size())  ||
         (m_useInitValues.size() == m_initValuesIDs.size()));

  // the following is useful if restarting from a file with less equations
  if (m_initValues.size() > static_cast<CFuint>(nbEquations))
  {
    nbEquations = m_initValues.size();
  }

  getReadData().setNbEquations(static_cast<CFuint>(nbEquations));

  if(nbEquations < 1) {
    throw BadFormatException (FromHere(),"Wrong number of equations in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbEquations() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbNodes(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbNodes() called" << "\n");

  CFint nbUpdatableNodes = 0;
  CFint nbNonUpdatableNodes = 0;

  fin >> nbUpdatableNodes >> nbNonUpdatableNodes;

  getReadData().setNbUpdatableNodes
    (static_cast<CFuint>(nbUpdatableNodes));

  getReadData().setNbNonUpdatableNodes
    (static_cast<CFuint>(nbNonUpdatableNodes));

  if(nbUpdatableNodes < 0) {
    throw BadFormatException (FromHere(),"Negative number of nodes in CFmesh");
  }

  if(nbNonUpdatableNodes < 0) {
    throw BadFormatException (FromHere(),"Negative number of nodes in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbNodes() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbStates(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readNbStates() called" << "\n");

  CFint nbUpdatableStates = 0;
  CFint nbNonUpdatableStates = 0;

  fin >> nbUpdatableStates >> nbNonUpdatableStates;

  getReadData().setNbUpdatableStates
    (static_cast<CFuint>(nbUpdatableStates));

  getReadData().setNbNonUpdatableStates
    (static_cast<CFuint>(nbNonUpdatableStates));

  if(nbUpdatableStates < 0) {
    throw BadFormatException (FromHere(),"Negative number of states in CFmesh");
  }

  if(nbNonUpdatableStates < 0) {
    throw BadFormatException (FromHere(),"Negative number of states in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbStates() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbExtraNodalVars(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readNbExtraNodalVars() called" << "\n");

  CFint nbExtraNodalVars = 0;

  fin >> nbExtraNodalVars;

  getReadData().setNbExtraNodalVars
    (static_cast<CFuint>(nbExtraNodalVars));

  if(nbExtraNodalVars < 0) {
    throw BadFormatException (FromHere(),"Negative number of extra nodal variables in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbExtraNodalVars() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbExtraStateVars(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readNbExtraStateVars() called" << "\n");

  CFint nbExtraStateVars = 0;

  fin >> nbExtraStateVars;

  getReadData().setNbExtraStateVars
    (static_cast<CFuint>(nbExtraStateVars));

  if(nbExtraStateVars < 0) {
    throw BadFormatException (FromHere(),"Negative number of extra state variables in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbExtraStateVars() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readExtraStateVarNames(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readExtraStateVarNames() called" << "\n");

 const CFuint nbExtraStateVars = getReadData().getNbExtraStateVars();

 std::vector<std::string> extraStateVarNames(nbExtraStateVars);

 for (CFuint i = 0; i < nbExtraStateVars; ++i) {
    extraStateVarNames[i] = "";
    fin >> extraStateVarNames[i];
 }

 getReadData().setExtraStateVarNames(extraStateVarNames);

  CFLogDebugMin( "CFmeshFileReader<DATA>::readExtraStateVarNames() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readExtraNodalVarNames(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readExtraNodalVarNames() called" << "\n");

 const CFuint nbExtraNodalVars = getReadData().getNbExtraNodalVars();
 std::vector<std::string> extraNodalVarNames(nbExtraNodalVars);

 for (CFuint i = 0; i < nbExtraNodalVars; ++i) {
    extraNodalVarNames[i] = "";
    fin >> extraNodalVarNames[i];
 }

 getReadData().setExtraNodalVarNames(extraNodalVarNames);

  CFLogDebugMin( "CFmeshFileReader<DATA>::readExtraNodalVarNames() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbElements(std::ifstream& fin)
{
  using namespace std;

  CFLog(NOTICE,"Memory Usage before assembling connectivity: " << Common::OSystem::getInstance().getProcessInfo()->memoryUsage() << "\n");

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbElements() called" << "\n");

  CFint nbElements = 0;
  fin >> nbElements;

  getReadData().setNbElements(static_cast<CFuint>(nbElements));

  if(nbElements < 0) {
    throw BadFormatException (FromHere(),"Negative number of elements in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbElements() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbElementTypes(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbElementTypes() called" << "\n");

  CFint nbElementTypes = 0;
  fin >> nbElementTypes;

  getReadData().setNbElementTypes(static_cast<CFuint>(nbElementTypes));

  if(getReadData().getDimension() == DIM_2D &&
     (nbElementTypes < 0 || nbElementTypes > 2)) {
    throw BadFormatException (FromHere(),"Bad number of element types in 2D CFmesh");
  }

  if(getReadData().getDimension() == DIM_3D &&
     (nbElementTypes < 0 || nbElementTypes > 4)) {
    throw BadFormatException (FromHere(),"Bad number of element types in 3D CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbElementTypes() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readGeometricPolyOrder(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeometricPolyOrder() called" << "\n");

  CFuint order = 0;
  fin >> order;
  getReadData().setGeometricPolyOrder(static_cast<CFPolyOrder::Type>(order));

  if(getReadData().getGeometricPolyOrder() >= CFPolyOrder::MAXORDER ||
     getReadData().getGeometricPolyOrder() < CFPolyOrder::ORDER0) {
    throw BadFormatException (FromHere(),"Bad polynomial order of geometry in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeometricPolyOrder() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readSolutionPolyOrder(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readSolutionPolyOrder() called" << "\n");

  CFuint order = 0;
  fin >> order;
  getReadData().setSolutionPolyOrder(static_cast<CFPolyOrder::Type>(order));

  if(getReadData().getSolutionPolyOrder() >= CFPolyOrder::MAXORDER ||
     getReadData().getSolutionPolyOrder() < CFPolyOrder::ORDER0) {
    throw BadFormatException (FromHere(),"Bad polynomial order of solution in CFmesh");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readSolutionPolyOrder() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readGeometricPolyType(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeometricPolyType() called" << "\n");

  CFuint Type = 0;
  fin >> Type;
  getReadData().setGeometricPolyType(static_cast<CFPolyForm::Type>(Type));

  /// @todo should add check here for validity

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeometricPolyType() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readSolutionPolyType(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readSolutionPolyType() called" << "\n");

  CFuint Type = 0;
  fin >> Type;
  getReadData().setSolutionPolyType(static_cast<CFPolyForm::Type>(Type));

  /// @todo should add check here for validity

  CFLogDebugMin( "CFmeshFileReader<DATA>::readSolutionPolyType() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readElementTypes(std::ifstream& fin)
{
  using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readElementTypes() called" << "\n");

  const CFuint nbElementTypes = getReadData().getNbElementTypes();

  Common::SafePtr< vector<ElementTypeData> > elementType =
    getReadData().getElementTypeData();

  elementType->resize(nbElementTypes);

  for (CFuint i = 0; i < nbElementTypes; ++i) {
    std::string elementShape = "";
    fin >> elementShape;

    (*elementType)[i].setShape(elementShape);

    (*elementType)[i].setGeoShape(CFGeoShape::Convert::to_enum(elementShape));
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readElementTypes() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbElementsPerType(std::ifstream& fin)
{
  using namespace std;
  using namespace COOLFluiD::Common;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readElementTypes() called"
  << "\n");

  const CFuint nbElementTypes = getReadData().getNbElementTypes();

  Common::SafePtr< vector<ElementTypeData> > elementType =
    getReadData().getElementTypeData();

  CFuint sumNbElems = 0;
  CFint nbElemPerType = 0;

  for (CFuint i = 0; i < nbElementTypes; ++i) {
    fin >> nbElemPerType;

    (*elementType)[i].setNbElems(static_cast<CFuint>(nbElemPerType));

    sumNbElems += nbElemPerType;

    if (nbElemPerType < 0 || static_cast<CFuint>(nbElemPerType) >
  getReadData().getNbElements()) {
      throw BadFormatException (FromHere(),"Bad number of elements per type in CFmesh");
    }
  }

  if (sumNbElems != getReadData().getNbElements()){
    throw BadFormatException
      (FromHere(), "In CFmesh sum of elements per type differs from number elements");
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readElementTypes() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbNodesPerType(std::ifstream& fin)
{
  using namespace std;
  using namespace COOLFluiD::Common;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readNbNodesPerType() called" << "\n");

  const CFuint nbElementTypes = getReadData().getNbElementTypes();

  Common::SafePtr< vector<ElementTypeData> > elementType =
    getReadData().getElementTypeData();

  CFint nbNodesPerType = 0;
  for (CFuint i = 0; i < nbElementTypes; ++i) {
    fin >> nbNodesPerType;

    (*elementType)[i].setNbNodes(static_cast<CFuint>(nbNodesPerType));

    CFLogDebugMin( "nbNodesPerType = " << nbNodesPerType << "\n");

    if(nbNodesPerType < 0) {
      throw BadFormatException
  (FromHere(), "In CFmesh, negative number of nodes per type");
    }

    /// @todo try to avoid having these hardcoded
    ///       only working for P1 geometry elements
    if(getReadData().getDimension() == DIM_2D &&
       nbNodesPerType != 3 &&
       nbNodesPerType != 4) {
      throw BadFormatException
  (FromHere(), "In CFmesh, bad number of nodes per 2D type");
    }

    if(getReadData().getDimension() == DIM_3D &&
       nbNodesPerType != 4 &&
       nbNodesPerType != 5 &&
       nbNodesPerType != 6 &&
       nbNodesPerType != 8) {
      throw BadFormatException
  (FromHere(), "In CFmesh, bad number of nodes per 3D type");
    }
  }
  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbNodesPerType() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbStatesPerType(std::ifstream& fin)
{
  using namespace std;
  using namespace COOLFluiD::Common;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbStatesPerType() called"
  << "\n");

  const CFuint nbElementTypes = getReadData().getNbElementTypes();

  Common::SafePtr< vector<ElementTypeData> > elementType =
    getReadData().getElementTypeData();

  CFint nbStatesPerType = 0;
  for (CFuint i = 0; i < nbElementTypes; ++i) {
    fin >> nbStatesPerType;

    (*elementType)[i].setNbStates
      (static_cast<CFuint>(nbStatesPerType));

    CFLogDebugMin( "nbStatesPerType = " << nbStatesPerType << "\n");

    if(nbStatesPerType < 0) {
      throw BadFormatException
  (FromHere(), "In CFmesh, negative number of states per type");
    }
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbStatesPerType() end"
  << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNodeList(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNodeList() called" << "\n");

  const CFuint nbNodes = getReadData().getTotalNbNodes();

  getReadData().resizeNodes(nbNodes);

  RealVector node(getReadData().getDimension());
  RealVector extraVars(getReadData().getNbExtraNodalVars());
  for (CFuint n = 0; n < nbNodes; ++n) {

    for (CFuint iDim = 0; iDim < getReadData().getDimension(); ++iDim) {
      fin >> node[iDim];
    }
    for (CFuint iVar = 0; iVar < getReadData().getNbExtraNodalVars(); ++iVar) {
      fin >> extraVars[iVar];
    }

    getReadData().setNode(n, node);
    getReadData().setNodalExtraVar(n, extraVars);
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNodeList() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readStateList(std::ifstream& fin)
{
  using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readStateList() called" << "\n");

  if ((m_initValues.size()    != m_useInitValues.size()) &&
      (m_initValuesIDs.size() != m_useInitValues.size()))
  {
    throw BadFormatException
      (FromHere(), "m_initValues && m_initValuesIDs sizes != m_useInitValues.size()");
  }

  const CFuint nbStates = getReadData().getTotalNbStates();
  const CFuint nbEqs = getReadData().getNbEquations();

  getReadData().resizeStates(nbStates);

  bool isWithSolution = false;
  fin >> isWithSolution;
  getReadData().setWithSolution(isWithSolution);

  RealVector tmpState(0.0, nbEqs);
  for (CFuint s = 0; s < nbStates; ++s) {

          // read the state
          if (isWithSolution) {
            if (m_useInitValues.size() == 0) {
              fin >> tmpState;
            }
            else {
              cf_assert(m_useInitValues.size() == nbEqs);
              for (CFuint iEq = 0; iEq < nbEqs; ++iEq) {
                if (!m_useInitValues[iEq]) {
                  fin >> tmpState[iEq];
                }
          else {
            cf_assert(m_initValues.size() != m_initValuesIDs.size());
            if (m_initValues.size() > 0) {
              cf_assert(m_initValuesIDs.size() == 0);
              tmpState[iEq] = m_initValues[iEq];
            }

            if (m_initValuesIDs.size() > 0) {
              cf_assert(m_initValues.size() == 0);
              cf_assert(m_initValuesIDs[iEq] < iEq);
              tmpState[iEq] = tmpState[m_initValuesIDs[iEq]];
            }
          }
        }
      }
    }

    getReadData().setState(s, tmpState);
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readStateList() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readElementList(std::ifstream& fin)
{
  using namespace std;
  using namespace COOLFluiD::Common;

  const CFuint nbElements = getReadData().getNbElements();
  const CFuint nbElementTypes = getReadData().getNbElementTypes();

  CFLogDebugMin( "CFmeshFileReader<DATA>::readElementList() called" << "\n");

  Common::SafePtr< vector<ElementTypeData> > elementType =
    getReadData().getElementTypeData();

  // create the pattern for the connectivity table
  std::valarray<CFuint> nbColElemNode (nbElements);
  std::valarray<CFuint> nbColElemState(nbElements);

  getReadData().consistencyCheck();

  CFuint currentElem = 0;
  for (CFuint iType = 0; iType < nbElementTypes; ++iType) {
    const CFuint iElemEnd = currentElem +
      (*elementType)[iType].getNbElems();

    const CFuint nbNodesPerType = (*elementType)[iType].getNbNodes();
    const CFuint nbStatesPerType = (*elementType)[iType].getNbStates();
    for (CFuint iElem = currentElem; iElem < iElemEnd; ++iElem) {
      nbColElemNode[iElem]  = nbNodesPerType;
      nbColElemState[iElem] = nbStatesPerType;
    }
    currentElem = iElemEnd;
  }

  getReadData().resizeElementNode(nbColElemNode);

  getReadData().resizeElementState(nbColElemState);

  // loop over the element types
  // and read the element to node and element to state
  // connectivity tables
  const CFuint totNbNodes = getReadData().getTotalNbNodes();
  const CFuint totNbStates = getReadData().getTotalNbStates();

  CFuint iElemBegin = 0;
  for (CFuint iType = 0; iType < nbElementTypes; ++iType) {

    const CFuint nbNodesInElem  =
      (*elementType)[iType].getNbNodes();

    const CFuint nbStatesInElem =
      (*elementType)[iType].getNbStates();

    const CFuint nbElementsPerType = (*elementType)[iType].getNbElems();
    const CFuint iElemEnd = iElemBegin + nbElementsPerType;

    // loop over the elements in this type
    for (CFuint iElem = iElemBegin; iElem < iElemEnd; ++iElem) {

      CFuint nodeID = 0;
      for (CFuint iNode = 0; iNode < nbNodesInElem; ++iNode) {
  fin >> nodeID;

  if (nodeID >= totNbNodes) {
    CFLogDebugMax("NodeID: " << nodeID << "\n");
          throw BadFormatException (FromHere(),"Wrong node ID number");
  }

  getReadData().setElementNode(iElem, iNode, nodeID);
      }

      CFuint stateID = 0;
      for (CFuint iState = 0; iState < nbStatesInElem; ++iState) {
  fin >> stateID;

  if (stateID >= totNbStates) {
    CFLogDebugMax("StateID: " << stateID << "\n");
    throw BadFormatException (FromHere(),"Wrong state ID number");
  }

  // element state is not built for cell center FVM
  getReadData().setElementState(iElem, iState, stateID);
      }
    }

    iElemBegin +=  nbElementsPerType;

  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readElementList() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbTRSs(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbTRSs() called" << "\n");

  CFuint nbTRSs = 0;
  fin >> nbTRSs;

  getReadData().setNbTRSs(nbTRSs);

  if(nbTRSs < 1) {
    throw BadFormatException (FromHere(),"Number of TRSs must be at least 1");
  }

  getReadData().resizeGeoConn(getReadData().getNbTRSs());

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbTRSs() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readTRSName(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readTRSName() called" << "\n");

  std::string name = "";

  fin >> name;

  getReadData().getNameTRS()->push_back(name);

  CFLogDebugMin( "CFmeshFileReader<DATA>::readTRSName() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbTRs(std::ifstream& fin)
{
 using namespace std;

 CFLogDebugMin( "CFmeshFileReader<DATA>::readNbTRs() called" << "\n");

  CFuint nbTRsInTRS = 0;
  fin >> nbTRsInTRS;

  /// @todo for parallel computation  nbTRsInTRS could be 0
  cf_assert(nbTRsInTRS > 0);

  getReadData().getNbTRs()->push_back(nbTRsInTRS);

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbTRs() " << nbTRsInTRS << "\n");
  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbTRs() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readNbGeomEnts(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbGeomEnts() called" << "\n");

  const CFuint currNbTRs = getReadData().getNbTRs()->back();
  vector<CFuint> nbGeomEntsInTR;
  nbGeomEntsInTR.reserve(currNbTRs);

  for (CFuint iTr = 0; iTr < currNbTRs; ++iTr) {
    CFint nbGeomEnts = 0;
    fin >> nbGeomEnts;

    cf_assert(nbGeomEnts > 0);

    nbGeomEntsInTR.push_back(static_cast<CFuint>(nbGeomEnts));
  }

  getReadData().getNbGeomEntsPerTR()->push_back(nbGeomEntsInTR);

  CFLogDebugMin( "CFmeshFileReader<DATA>::readNbGeomEnts() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readGeomType(std::ifstream& fin)
{
  using namespace std;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeomType() called" << "\n");

  std::string geomName = "";
  fin >> geomName;

  getReadData().getGeomType()->push_back(CFGeoEnt::Convert::to_enum( geomName ));

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeomType() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
void CFmeshFileReader<DATA>::readGeomEntList(std::ifstream& fin)
{
  using namespace std;
  using namespace COOLFluiD::Common;

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeomEntList() called" << "\n");

  // load TRs data into memory for further use
  // this is actually only useful to be able to write file
  // without having constructed TRSs
  // get id of last TRS read from file

  SafePtr< vector<CFuint> > nbTRs = getReadData().getNbTRs();
  SafePtr< vector<vector<CFuint> > > nbGeomEntsPerTR =
    getReadData().getNbGeomEntsPerTR();

  const CFuint iTRS = getReadData().getNameTRS()->size() - 1;
  const CFuint nbTRsInCurrTRS = (*nbTRs)[iTRS];

  getReadData().resizeGeoConn(iTRS, nbTRsInCurrTRS);

  for (CFuint iTR = 0; iTR < nbTRs->back(); ++iTR) {

    for (CFuint iGeo = 0; iGeo < nbGeomEntsPerTR->back()[iTR]; ++iGeo){

      pair<std::valarray<CFuint>, std::valarray<CFuint> > geoConLocal;

      CFuint nbNodes = 0;
      CFuint nbStates = 0;

      fin >> nbNodes;
      geoConLocal.first.resize(nbNodes);

      fin >> nbStates;
      geoConLocal.second.resize(nbStates);

      for(CFuint n = 0; n < nbNodes; ++n) {
  fin >> geoConLocal.first[n];
      }

      for(CFuint s = 0; s < nbStates; ++s) {
  fin >> geoConLocal.second[s];
      }

      getReadData().addGeoConn(iTRS, iTR, geoConLocal);
      // (*getReadData().geoConn)[iTRS][iTR].push_back(*geoConLocal);
    }
  }

  CFLogDebugMin( "CFmeshFileReader<DATA>::readGeomEntList() end" << "\n");
}

//////////////////////////////////////////////////////////////////////////////

template <class DATA>
bool CFmeshFileReader<DATA>::readString(std::ifstream& file)
{
  using namespace std;

  std::string key = "";
  file >> key;

  // check end of file
  if (key != getReaderTerminator()) {

    typename MapString2Reader::iterator key_pair = m_mapString2Reader.find(key);

    // check if key exists else ignore it
    if (key_pair != m_mapString2Reader.end())
    {
      CFLogDebugMin( "Read CFmesh Key: " << key << "\n");
      ReaderFunction function = key_pair->second;
      cf_assert(function != CFNULL);
      (this->*function)(file);
    }
    else
    {
      std::string msg = "Key in CFmesh is not valid:" + key;
      throw Common::NoSuchValueException (FromHere(),msg);
    }
    // keep reading
    return true;
  }

  // found end of file
  return false;
}

//////////////////////////////////////////////////////////////////////////////

  } // namespace Framework

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
