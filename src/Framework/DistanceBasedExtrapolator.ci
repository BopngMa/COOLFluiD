#include "Framework/MeshData.hh"
#include "Framework/PhysicalModel.hh"
#include "Framework/State.hh"
#include "Common/ProcessInfo.hh"
#include "Common/OSystem.hh"
#include "Common/SwapEmpty.hh"
#include "Environment/SingleBehaviorFactory.hh"

//////////////////////////////////////////////////////////////////////////////

namespace COOLFluiD {

  namespace Framework {

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
DistanceBasedExtrapolator<DATA>::DistanceBasedExtrapolator(const std::string& name) :
  NodalStatesExtrapolator<DATA>(name),
  _weights(),
  _weightsStorage()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
DistanceBasedExtrapolator<DATA>::~DistanceBasedExtrapolator()
{
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::extrapolateInAllNodes()
{
  const CFuint nbNodes = this->socket_nodes.getDataHandle().size();
  for (CFuint nodeID = 0; nodeID < nbNodes; ++nodeID) {
    this->_currNodeID = nodeID;
    extrapolate();
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::extrapolateInNodes(const std::vector<Node*>& nodes)
{
  using namespace std;	
  
  const CFuint nbNodes = nodes.size();
  for (CFuint iNode = 0; iNode < nbNodes; ++iNode) {
    this->_currNodeID = nodes[iNode]->getLocalID();
    extrapolate();
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::setup()
{
  using namespace std;	

  // first call the parent class
  NodalStatesExtrapolator<DATA>::setup();

  DataHandle < Framework::Node*, Framework::GLOBAL > nodes = this->socket_nodes.getDataHandle();
  const CFuint nbNodes = nodes.size();
  
  //cf_assert(PhysicalModelStack::getActive()->getDim() == 2 ||
  // PhysicalModelStack::getActive()->getDim() == 3);
  
  // resize the storage of the weights
  CFuint weightsStorageSize = 0;
  for (CFuint i = 0; i < nbNodes; ++i) {
    weightsStorageSize += this->_neighborStates[i].size();
  }

  CFLog(VERBOSE, "Memory Usage before weights: " << Common::OSystem::getInstance().getProcessInfo()->memoryUsage() << "\n" );

  // resize the table
  this->_weights.resize(nbNodes);
  this->_weightsStorage.resize(weightsStorageSize, 0.0);

  CFuint counter = 0;
  for (CFuint i = 0; i < nbNodes; ++i) {
    cf_assert(counter < weightsStorageSize);
    _weights[i]  = &_weightsStorage[counter];
    counter += this->_neighborStates[i].size();
  }

  CFLog(VERBOSE, "Memory Usage after weights: " << Common::OSystem::getInstance().getProcessInfo()->memoryUsage() << "\n" );

  for (CFuint iNode = 0; iNode < nbNodes; ++iNode) {
    const Node& currNode = *nodes[iNode];
    updateWeights(iNode, currNode);
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::updateWeights(CFuint nodeID, const Node& currNode)
{
  const CFuint nbNeighborStates = this->_neighborStates[nodeID].size();
  CFreal sumWeight = 0.0;
  for (CFuint iState = 0; iState < nbNeighborStates; ++iState) {
    const Node& neighNode = this->_neighborStates[nodeID][iState]->getCoordinates();
    const CFreal dist = MathTools::MathFunctions::getDistance(neighNode, currNode);
    cf_assert(dist > 0.);
    const CFreal weight = 1./dist;
    this->_weights[nodeID][iState] = weight;
    sumWeight += weight;  
  }
  
  // divide the weights by the sum of the weights
  for (CFuint iState = 0; iState < nbNeighborStates; ++iState) {
    this->_weights[nodeID][iState] /= sumWeight;
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::applyInner()
{
  DataHandle<RealVector> nodalStates = this->socket_nstates.getDataHandle();
  const CFuint nbNeighborStates = this->_neighborStates[this->_currNodeID].size();
  
  for (CFuint iState = 0; iState < nbNeighborStates; ++iState) {
    const CFreal weight = static_cast<CFreal>(_weights[this->_currNodeID][iState]);
    const State *const neighState = this->_neighborStates[this->_currNodeID][iState];
    nodalStates[this->_currNodeID] += (*neighState)*weight;
  }
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::extrapolate()
{
  DataHandle<RealVector> nodalStates = this->socket_nstates.getDataHandle();
  // reset to 0 the nodal states
  nodalStates[this->_currNodeID] = 0.;
  applyInner();
}

//////////////////////////////////////////////////////////////////////////////

template <typename DATA>
void DistanceBasedExtrapolator<DATA>::unsetup()
{
  Framework::NodalStatesExtrapolator<DATA>::unsetup();
  
  Common::SwapEmpty(_weights);
  Common::SwapEmpty(_weightsStorage);
}

//////////////////////////////////////////////////////////////////////////////
  
    } // namespace Framework

} // namespace COOLFluiD

//////////////////////////////////////////////////////////////////////////////
